/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.CallControlApplicationResponse;
import com.telnyx.sdk.models.CreateCallControlApplicationRequest;
import com.telnyx.sdk.models.ListCallControlApplicationsResponse;
import com.telnyx.sdk.models.UpdateCallControlApplicationRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CallControlApplicationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public CallControlApplicationsApi() {
    this(new ApiClient());
  }

  public CallControlApplicationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Create a call control application
   * Create a call control application.
   * @param createCallControlApplicationRequest Create call control application request. (required)
   * @return CompletableFuture&lt;CallControlApplicationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CallControlApplicationResponse> createCallControlApplication(CreateCallControlApplicationRequest createCallControlApplicationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createCallControlApplicationRequestBuilder(createCallControlApplicationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a call control application
   * Create a call control application.
   * @param createCallControlApplicationRequest Create call control application request. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CallControlApplicationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CallControlApplicationResponse>> createCallControlApplicationWithHttpInfo(CreateCallControlApplicationRequest createCallControlApplicationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createCallControlApplicationRequestBuilder(createCallControlApplicationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CallControlApplicationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createCallControlApplicationRequestBuilder(CreateCallControlApplicationRequest createCallControlApplicationRequest) throws ApiException {
    // verify the required parameter 'createCallControlApplicationRequest' is set
    if (createCallControlApplicationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCallControlApplicationRequest' when calling createCallControlApplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_control_applications";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCallControlApplicationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a call control application
   * Deletes a call control application.
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;CallControlApplicationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CallControlApplicationResponse> deleteCallControlApplication(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteCallControlApplicationRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a call control application
   * Deletes a call control application.
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CallControlApplicationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CallControlApplicationResponse>> deleteCallControlApplicationWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteCallControlApplicationRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CallControlApplicationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteCallControlApplicationRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteCallControlApplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_control_applications/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List call control applications
   * Return a list of call control applications.
   * @param listCallControlApplicationsRequest {@link APIlistCallControlApplicationsRequest}
   * @return CompletableFuture&lt;ListCallControlApplicationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListCallControlApplicationsResponse> listCallControlApplications(APIlistCallControlApplicationsRequest listCallControlApplicationsRequest) throws ApiException {
    Integer pageNumber = listCallControlApplicationsRequest.pageNumber();
    Integer pageSize = listCallControlApplicationsRequest.pageSize();
    String filterApplicationNameContains = listCallControlApplicationsRequest.filterApplicationNameContains();
    String filterOutboundOutboundVoiceProfileId = listCallControlApplicationsRequest.filterOutboundOutboundVoiceProfileId();
    String sort = listCallControlApplicationsRequest.sort();
    return listCallControlApplications(pageNumber, pageSize, filterApplicationNameContains, filterOutboundOutboundVoiceProfileId, sort);
  }

  /**
   * List call control applications
   * Return a list of call control applications.
   * @param listCallControlApplicationsRequest {@link APIlistCallControlApplicationsRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListCallControlApplicationsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListCallControlApplicationsResponse>> listCallControlApplicationsWithHttpInfo(APIlistCallControlApplicationsRequest listCallControlApplicationsRequest) throws ApiException {
    Integer pageNumber = listCallControlApplicationsRequest.pageNumber();
    Integer pageSize = listCallControlApplicationsRequest.pageSize();
    String filterApplicationNameContains = listCallControlApplicationsRequest.filterApplicationNameContains();
    String filterOutboundOutboundVoiceProfileId = listCallControlApplicationsRequest.filterOutboundOutboundVoiceProfileId();
    String sort = listCallControlApplicationsRequest.sort();
    return listCallControlApplicationsWithHttpInfo(pageNumber, pageSize, filterApplicationNameContains, filterOutboundOutboundVoiceProfileId, sort);
  }

  /**
   * List call control applications
   * Return a list of call control applications.
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterApplicationNameContains If present, applications with &lt;code&gt;application_name&lt;/code&gt; containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters. (optional, default to &quot;null&quot;)
   * @param filterOutboundOutboundVoiceProfileId Identifies the associated outbound voice profile. (optional)
   * @param sort Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt; -&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If not given, results are sorted by &lt;code&gt;created_at&lt;/code&gt; in descending order. (optional, default to created_at)
   * @return CompletableFuture&lt;ListCallControlApplicationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListCallControlApplicationsResponse> listCallControlApplications(Integer pageNumber, Integer pageSize, String filterApplicationNameContains, String filterOutboundOutboundVoiceProfileId, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listCallControlApplicationsRequestBuilder(pageNumber, pageSize, filterApplicationNameContains, filterOutboundOutboundVoiceProfileId, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listCallControlApplications", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListCallControlApplicationsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List call control applications
   * Return a list of call control applications.
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterApplicationNameContains If present, applications with &lt;code&gt;application_name&lt;/code&gt; containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters. (optional, default to &quot;null&quot;)
   * @param filterOutboundOutboundVoiceProfileId Identifies the associated outbound voice profile. (optional)
   * @param sort Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt; -&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If not given, results are sorted by &lt;code&gt;created_at&lt;/code&gt; in descending order. (optional, default to created_at)
   * @return CompletableFuture&lt;ApiResponse&lt;ListCallControlApplicationsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListCallControlApplicationsResponse>> listCallControlApplicationsWithHttpInfo(Integer pageNumber, Integer pageSize, String filterApplicationNameContains, String filterOutboundOutboundVoiceProfileId, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listCallControlApplicationsRequestBuilder(pageNumber, pageSize, filterApplicationNameContains, filterOutboundOutboundVoiceProfileId, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listCallControlApplications", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListCallControlApplicationsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListCallControlApplicationsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listCallControlApplicationsRequestBuilder(Integer pageNumber, Integer pageSize, String filterApplicationNameContains, String filterOutboundOutboundVoiceProfileId, String sort) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_control_applications";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[application_name][contains]", filterApplicationNameContains));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[outbound.outbound_voice_profile_id]", filterOutboundOutboundVoiceProfileId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistCallControlApplicationsRequest {
    private Integer pageNumber; // The page number to load (optional, default to 1)
    private Integer pageSize; // The size of the page (optional, default to 20)
    private String filterApplicationNameContains; // If present, applications with &lt;code&gt;application_name&lt;/code&gt; containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters. (optional, default to &quot;null&quot;)
    private String filterOutboundOutboundVoiceProfileId; // Identifies the associated outbound voice profile. (optional)
    private String sort; // Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt; -&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-connection_name&lt;/code&gt;: sorts the result by the     &lt;code&gt;connection_name&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If not given, results are sorted by &lt;code&gt;created_at&lt;/code&gt; in descending order. (optional, default to created_at)

    private APIlistCallControlApplicationsRequest(Builder builder) {
      this.pageNumber = builder.pageNumber;
      this.pageSize = builder.pageSize;
      this.filterApplicationNameContains = builder.filterApplicationNameContains;
      this.filterOutboundOutboundVoiceProfileId = builder.filterOutboundOutboundVoiceProfileId;
      this.sort = builder.sort;
    }
    public Integer pageNumber() {
      return pageNumber;
    }
    public Integer pageSize() {
      return pageSize;
    }
    public String filterApplicationNameContains() {
      return filterApplicationNameContains;
    }
    public String filterOutboundOutboundVoiceProfileId() {
      return filterOutboundOutboundVoiceProfileId;
    }
    public String sort() {
      return sort;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private Integer pageNumber;
      private Integer pageSize;
      private String filterApplicationNameContains;
      private String filterOutboundOutboundVoiceProfileId;
      private String sort;

      public Builder pageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
      }
      public Builder pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }
      public Builder filterApplicationNameContains(String filterApplicationNameContains) {
        this.filterApplicationNameContains = filterApplicationNameContains;
        return this;
      }
      public Builder filterOutboundOutboundVoiceProfileId(String filterOutboundOutboundVoiceProfileId) {
        this.filterOutboundOutboundVoiceProfileId = filterOutboundOutboundVoiceProfileId;
        return this;
      }
      public Builder sort(String sort) {
        this.sort = sort;
        return this;
      }
      public APIlistCallControlApplicationsRequest build() {
        return new APIlistCallControlApplicationsRequest(this);
      }
    }
  }

  /**
   * Retrieve a call control application
   * Retrieves the details of an existing call control application.
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;CallControlApplicationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CallControlApplicationResponse> retrieveCallControlApplication(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveCallControlApplicationRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a call control application
   * Retrieves the details of an existing call control application.
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CallControlApplicationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CallControlApplicationResponse>> retrieveCallControlApplicationWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveCallControlApplicationRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CallControlApplicationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveCallControlApplicationRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveCallControlApplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_control_applications/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a call control application
   * Updates settings of an existing call control application.
   * @param id Identifies the resource. (required)
   * @param updateCallControlApplicationRequest Update call control application request. (required)
   * @return CompletableFuture&lt;CallControlApplicationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CallControlApplicationResponse> updateCallControlApplication(String id, UpdateCallControlApplicationRequest updateCallControlApplicationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateCallControlApplicationRequestBuilder(id, updateCallControlApplicationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a call control application
   * Updates settings of an existing call control application.
   * @param id Identifies the resource. (required)
   * @param updateCallControlApplicationRequest Update call control application request. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CallControlApplicationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CallControlApplicationResponse>> updateCallControlApplicationWithHttpInfo(String id, UpdateCallControlApplicationRequest updateCallControlApplicationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateCallControlApplicationRequestBuilder(id, updateCallControlApplicationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateCallControlApplication", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CallControlApplicationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CallControlApplicationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateCallControlApplicationRequestBuilder(String id, UpdateCallControlApplicationRequest updateCallControlApplicationRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateCallControlApplication");
    }
    // verify the required parameter 'updateCallControlApplicationRequest' is set
    if (updateCallControlApplicationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCallControlApplicationRequest' when calling updateCallControlApplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_control_applications/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateCallControlApplicationRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
