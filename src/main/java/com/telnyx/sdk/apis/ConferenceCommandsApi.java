/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.ConferenceCallRequest;
import com.telnyx.sdk.models.ConferenceCommandResponse;
import com.telnyx.sdk.models.ConferenceHoldRequest;
import com.telnyx.sdk.models.ConferenceMuteRequest;
import com.telnyx.sdk.models.ConferencePlayRequest;
import com.telnyx.sdk.models.ConferenceResponse;
import com.telnyx.sdk.models.ConferenceSpeakRequest;
import com.telnyx.sdk.models.ConferenceUnholdRequest;
import com.telnyx.sdk.models.ConferenceUnmuteRequest;
import com.telnyx.sdk.models.CreateConferenceRequest;
import com.telnyx.sdk.models.JoinConferenceRequest;
import com.telnyx.sdk.models.ListConferencesResponse;
import com.telnyx.sdk.models.ListParticipantsResponse;
import com.telnyx.sdk.models.StartRecordingRequest;
import com.telnyx.sdk.models.StopRecordingRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConferenceCommandsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public ConferenceCommandsApi() {
    this(new ApiClient());
  }

  public ConferenceCommandsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Dial a new participant into a conference
   * Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.answered&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceCallRequest Dial Into Conference request object (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceDialParticipantIn(String id, ConferenceCallRequest conferenceCallRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceDialParticipantInRequestBuilder(id, conferenceCallRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceDialParticipantIn", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Dial a new participant into a conference
   * Dials a phone number and, when the call is answered, automatically joins them into the specified conference.  **Expected Webhooks:**  - &#x60;call.hangup&#x60; - &#x60;call.answered&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceCallRequest Dial Into Conference request object (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceDialParticipantInWithHttpInfo(String id, ConferenceCallRequest conferenceCallRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceDialParticipantInRequestBuilder(id, conferenceCallRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceDialParticipantIn", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceDialParticipantInRequestBuilder(String id, ConferenceCallRequest conferenceCallRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceDialParticipantIn");
    }
    // verify the required parameter 'conferenceCallRequest' is set
    if (conferenceCallRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceCallRequest' when calling conferenceDialParticipantIn");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/dial_participant"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceCallRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Hold conference participants
   * Hold a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceHoldRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceHoldParticipants(String id, ConferenceHoldRequest conferenceHoldRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceHoldParticipantsRequestBuilder(id, conferenceHoldRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceHoldParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Hold conference participants
   * Hold a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceHoldRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceHoldParticipantsWithHttpInfo(String id, ConferenceHoldRequest conferenceHoldRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceHoldParticipantsRequestBuilder(id, conferenceHoldRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceHoldParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceHoldParticipantsRequestBuilder(String id, ConferenceHoldRequest conferenceHoldRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceHoldParticipants");
    }
    // verify the required parameter 'conferenceHoldRequest' is set
    if (conferenceHoldRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceHoldRequest' when calling conferenceHoldParticipants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/hold"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceHoldRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Join a conference
   * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
   * @param id Uniquely identifies the conference by id or name (required)
   * @param joinConferenceRequest Join Conference request object (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceJoin(String id, JoinConferenceRequest joinConferenceRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceJoinRequestBuilder(id, joinConferenceRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceJoin", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Join a conference
   * Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the &#x60;call_control_id&#x60; of the leg you wish to join to the conference as an attribute.  **Expected Webhooks:**  - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; 
   * @param id Uniquely identifies the conference by id or name (required)
   * @param joinConferenceRequest Join Conference request object (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceJoinWithHttpInfo(String id, JoinConferenceRequest joinConferenceRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceJoinRequestBuilder(id, joinConferenceRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceJoin", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceJoinRequestBuilder(String id, JoinConferenceRequest joinConferenceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceJoin");
    }
    // verify the required parameter 'joinConferenceRequest' is set
    if (joinConferenceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'joinConferenceRequest' when calling conferenceJoin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/join"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(joinConferenceRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Mute conference participants
   * Mute a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceMuteRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceMuteParticipants(String id, ConferenceMuteRequest conferenceMuteRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceMuteParticipantsRequestBuilder(id, conferenceMuteRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceMuteParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Mute conference participants
   * Mute a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceMuteRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceMuteParticipantsWithHttpInfo(String id, ConferenceMuteRequest conferenceMuteRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceMuteParticipantsRequestBuilder(id, conferenceMuteRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceMuteParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceMuteParticipantsRequestBuilder(String id, ConferenceMuteRequest conferenceMuteRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceMuteParticipants");
    }
    // verify the required parameter 'conferenceMuteRequest' is set
    if (conferenceMuteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceMuteRequest' when calling conferenceMuteParticipants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/mute"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceMuteRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Play audio to conference participants
   * Play audio to all or some participants on a conference call.
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferencePlayRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferencePlayAudio(String id, ConferencePlayRequest conferencePlayRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferencePlayAudioRequestBuilder(id, conferencePlayRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferencePlayAudio", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Play audio to conference participants
   * Play audio to all or some participants on a conference call.
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferencePlayRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferencePlayAudioWithHttpInfo(String id, ConferencePlayRequest conferencePlayRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferencePlayAudioRequestBuilder(id, conferencePlayRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferencePlayAudio", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferencePlayAudioRequestBuilder(String id, ConferencePlayRequest conferencePlayRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferencePlayAudio");
    }
    // verify the required parameter 'conferencePlayRequest' is set
    if (conferencePlayRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferencePlayRequest' when calling conferencePlayAudio");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/play"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferencePlayRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Speak text to conference participants
   * Convert text to speech and play it to all or some participants.
   * @param id Specifies the conference by id or name (required)
   * @param conferenceSpeakRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceSpeakText(String id, ConferenceSpeakRequest conferenceSpeakRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceSpeakTextRequestBuilder(id, conferenceSpeakRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceSpeakText", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Speak text to conference participants
   * Convert text to speech and play it to all or some participants.
   * @param id Specifies the conference by id or name (required)
   * @param conferenceSpeakRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceSpeakTextWithHttpInfo(String id, ConferenceSpeakRequest conferenceSpeakRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceSpeakTextRequestBuilder(id, conferenceSpeakRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceSpeakText", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceSpeakTextRequestBuilder(String id, ConferenceSpeakRequest conferenceSpeakRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceSpeakText");
    }
    // verify the required parameter 'conferenceSpeakRequest' is set
    if (conferenceSpeakRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceSpeakRequest' when calling conferenceSpeakText");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/speak"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceSpeakRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Conference recording start
   * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
   * @param id Specifies the conference to record by id or name (required)
   * @param startRecordingRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceStartRecording(String id, StartRecordingRequest startRecordingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceStartRecordingRequestBuilder(id, startRecordingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceStartRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Conference recording start
   * Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60;
   * @param id Specifies the conference to record by id or name (required)
   * @param startRecordingRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceStartRecordingWithHttpInfo(String id, StartRecordingRequest startRecordingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceStartRecordingRequestBuilder(id, startRecordingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceStartRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceStartRecordingRequestBuilder(String id, StartRecordingRequest startRecordingRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceStartRecording");
    }
    // verify the required parameter 'startRecordingRequest' is set
    if (startRecordingRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'startRecordingRequest' when calling conferenceStartRecording");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/record_start"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(startRecordingRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Conference recording stop
   * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
   * @param id Specifies the conference to stop the recording for by id or name (required)
   * @param stopRecordingRequest Stop recording conference request (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceStopRecording(String id, StopRecordingRequest stopRecordingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceStopRecordingRequestBuilder(id, stopRecordingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceStopRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Conference recording stop
   * Stop recording the conference.  **Expected Webhooks:**  - &#x60;conference.recording.saved&#x60; 
   * @param id Specifies the conference to stop the recording for by id or name (required)
   * @param stopRecordingRequest Stop recording conference request (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceStopRecordingWithHttpInfo(String id, StopRecordingRequest stopRecordingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceStopRecordingRequestBuilder(id, stopRecordingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceStopRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceStopRecordingRequestBuilder(String id, StopRecordingRequest stopRecordingRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceStopRecording");
    }
    // verify the required parameter 'stopRecordingRequest' is set
    if (stopRecordingRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stopRecordingRequest' when calling conferenceStopRecording");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/record_stop"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(stopRecordingRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Unhold conference participants
   * Unhold a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceUnholdRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceUnholdParticipants(String id, ConferenceUnholdRequest conferenceUnholdRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceUnholdParticipantsRequestBuilder(id, conferenceUnholdRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceUnholdParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Unhold conference participants
   * Unhold a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceUnholdRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceUnholdParticipantsWithHttpInfo(String id, ConferenceUnholdRequest conferenceUnholdRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceUnholdParticipantsRequestBuilder(id, conferenceUnholdRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceUnholdParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceUnholdParticipantsRequestBuilder(String id, ConferenceUnholdRequest conferenceUnholdRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceUnholdParticipants");
    }
    // verify the required parameter 'conferenceUnholdRequest' is set
    if (conferenceUnholdRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceUnholdRequest' when calling conferenceUnholdParticipants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/unhold"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceUnholdRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Unmute conference participants
   * Unmute a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceUnmuteRequest  (required)
   * @return CompletableFuture&lt;ConferenceCommandResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceCommandResponse> conferenceUnmuteParticipants(String id, ConferenceUnmuteRequest conferenceUnmuteRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceUnmuteParticipantsRequestBuilder(id, conferenceUnmuteRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceUnmuteParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Unmute conference participants
   * Unmute a list of participants in a conference call
   * @param id Uniquely identifies the conference by id or name (required)
   * @param conferenceUnmuteRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceCommandResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceCommandResponse>> conferenceUnmuteParticipantsWithHttpInfo(String id, ConferenceUnmuteRequest conferenceUnmuteRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = conferenceUnmuteParticipantsRequestBuilder(id, conferenceUnmuteRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("conferenceUnmuteParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceCommandResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceCommandResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder conferenceUnmuteParticipantsRequestBuilder(String id, ConferenceUnmuteRequest conferenceUnmuteRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling conferenceUnmuteParticipants");
    }
    // verify the required parameter 'conferenceUnmuteRequest' is set
    if (conferenceUnmuteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceUnmuteRequest' when calling conferenceUnmuteParticipants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}/actions/unmute"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(conferenceUnmuteRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create conference
   * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
   * @param createConferenceRequest Create a conference (required)
   * @return CompletableFuture&lt;ConferenceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceResponse> createConference(CreateConferenceRequest createConferenceRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createConferenceRequestBuilder(createConferenceRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createConference", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create conference
   * Create a conference from an existing call leg using a &#x60;call_control_id&#x60; and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.  **Expected Webhooks:**  - &#x60;conference.created&#x60; - &#x60;conference.participant.joined&#x60; - &#x60;conference.participant.left&#x60; - &#x60;conference.ended&#x60; - &#x60;conference.recording.saved&#x60; 
   * @param createConferenceRequest Create a conference (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceResponse>> createConferenceWithHttpInfo(CreateConferenceRequest createConferenceRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createConferenceRequestBuilder(createConferenceRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createConference", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createConferenceRequestBuilder(CreateConferenceRequest createConferenceRequest) throws ApiException {
    // verify the required parameter 'createConferenceRequest' is set
    if (createConferenceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createConferenceRequest' when calling createConference");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createConferenceRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List conference participants
   * Lists conference participants
   * @param conferenceId Uniquely identifies the conference by id or name (required)
   * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
   * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
   * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListParticipantsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListParticipantsResponse> listConferenceParticipants(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listConferenceParticipantsRequestBuilder(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listConferenceParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListParticipantsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List conference participants
   * Lists conference participants
   * @param conferenceId Uniquely identifies the conference by id or name (required)
   * @param filterMuted If present, participants will be filtered to those who are/are not muted (optional)
   * @param filterOnHold If present, participants will be filtered to those who are/are not put on hold (optional)
   * @param filterWhispering If present, participants will be filtered to those who are whispering or are not (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListParticipantsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListParticipantsResponse>> listConferenceParticipantsWithHttpInfo(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listConferenceParticipantsRequestBuilder(conferenceId, filterMuted, filterOnHold, filterWhispering, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listConferenceParticipants", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListParticipantsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListParticipantsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listConferenceParticipantsRequestBuilder(String conferenceId, Boolean filterMuted, Boolean filterOnHold, Boolean filterWhispering, Integer pageNumber, Integer pageSize) throws ApiException {
    // verify the required parameter 'conferenceId' is set
    if (conferenceId == null) {
      throw new ApiException(400, "Missing the required parameter 'conferenceId' when calling listConferenceParticipants");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{conference_id}/participants"
        .replace("{conference_id}", ApiClient.urlEncode(conferenceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[muted]", filterMuted));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[on_hold]", filterOnHold));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[whispering]", filterWhispering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List conferences
   * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
   * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListConferencesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListConferencesResponse> listConferences(String filterName, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listConferencesRequestBuilder(filterName, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listConferences", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListConferencesResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List conferences
   * Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by &#x60;expires_at&#x60;.
   * @param filterName If present, conferences will be filtered to those with a matching &#x60;name&#x60; attribute. Matching is case-sensitive (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListConferencesResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListConferencesResponse>> listConferencesWithHttpInfo(String filterName, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listConferencesRequestBuilder(filterName, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listConferences", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListConferencesResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListConferencesResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listConferencesRequestBuilder(String filterName, Integer pageNumber, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[name]", filterName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a conference
   * Retrieve an existing conference
   * @param id Uniquely identifies the conference by id or name (required)
   * @return CompletableFuture&lt;ConferenceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ConferenceResponse> retrieveConference(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveConferenceRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveConference", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a conference
   * Retrieve an existing conference
   * @param id Uniquely identifies the conference by id or name (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ConferenceResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ConferenceResponse>> retrieveConferenceWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveConferenceRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveConference", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ConferenceResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConferenceResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveConferenceRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveConference");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/conferences/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
