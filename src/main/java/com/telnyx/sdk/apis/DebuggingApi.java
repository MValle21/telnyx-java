/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListCallEventsResponse;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DebuggingApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public DebuggingApi() {
    this(new ApiClient());
  }

  public DebuggingApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * List call events
   * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
   * @param listCallEventsRequest {@link APIlistCallEventsRequest}
   * @return CompletableFuture&lt;ListCallEventsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListCallEventsResponse> listCallEvents(APIlistCallEventsRequest listCallEventsRequest) throws ApiException {
    UUID filterCallLegId = listCallEventsRequest.filterCallLegId();
    UUID filterCallSessionId = listCallEventsRequest.filterCallSessionId();
    String filterStatus = listCallEventsRequest.filterStatus();
    String filterType = listCallEventsRequest.filterType();
    String filterEventTimestampGt = listCallEventsRequest.filterEventTimestampGt();
    String filterEventTimestampGte = listCallEventsRequest.filterEventTimestampGte();
    String filterEventTimestampLt = listCallEventsRequest.filterEventTimestampLt();
    String filterEventTimestampLte = listCallEventsRequest.filterEventTimestampLte();
    String filterEventTimestampEq = listCallEventsRequest.filterEventTimestampEq();
    return listCallEvents(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq);
  }

  /**
   * List call events
   * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
   * @param listCallEventsRequest {@link APIlistCallEventsRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListCallEventsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListCallEventsResponse>> listCallEventsWithHttpInfo(APIlistCallEventsRequest listCallEventsRequest) throws ApiException {
    UUID filterCallLegId = listCallEventsRequest.filterCallLegId();
    UUID filterCallSessionId = listCallEventsRequest.filterCallSessionId();
    String filterStatus = listCallEventsRequest.filterStatus();
    String filterType = listCallEventsRequest.filterType();
    String filterEventTimestampGt = listCallEventsRequest.filterEventTimestampGt();
    String filterEventTimestampGte = listCallEventsRequest.filterEventTimestampGte();
    String filterEventTimestampLt = listCallEventsRequest.filterEventTimestampLt();
    String filterEventTimestampLte = listCallEventsRequest.filterEventTimestampLte();
    String filterEventTimestampEq = listCallEventsRequest.filterEventTimestampEq();
    return listCallEventsWithHttpInfo(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq);
  }

  /**
   * List call events
   * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
   * @param filterCallLegId The unique identifier of an individual call leg. (optional)
   * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
   * @param filterStatus Event status (optional)
   * @param filterType Event type (optional)
   * @param filterEventTimestampGt Event timestamp: greater than (optional)
   * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
   * @param filterEventTimestampLt Event timestamp: lower than (optional)
   * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
   * @param filterEventTimestampEq Event timestamp: equal (optional)
   * @return CompletableFuture&lt;ListCallEventsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListCallEventsResponse> listCallEvents(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listCallEventsRequestBuilder(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listCallEvents", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListCallEventsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List call events
   * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
   * @param filterCallLegId The unique identifier of an individual call leg. (optional)
   * @param filterCallSessionId The unique identifier of the call control session. A session may include multiple call leg events. (optional)
   * @param filterStatus Event status (optional)
   * @param filterType Event type (optional)
   * @param filterEventTimestampGt Event timestamp: greater than (optional)
   * @param filterEventTimestampGte Event timestamp: greater than or equal (optional)
   * @param filterEventTimestampLt Event timestamp: lower than (optional)
   * @param filterEventTimestampLte Event timestamp: lower than or equal (optional)
   * @param filterEventTimestampEq Event timestamp: equal (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ListCallEventsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListCallEventsResponse>> listCallEventsWithHttpInfo(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listCallEventsRequestBuilder(filterCallLegId, filterCallSessionId, filterStatus, filterType, filterEventTimestampGt, filterEventTimestampGte, filterEventTimestampLt, filterEventTimestampLte, filterEventTimestampEq);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listCallEvents", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListCallEventsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListCallEventsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listCallEventsRequestBuilder(UUID filterCallLegId, UUID filterCallSessionId, String filterStatus, String filterType, String filterEventTimestampGt, String filterEventTimestampGte, String filterEventTimestampLt, String filterEventTimestampLte, String filterEventTimestampEq) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/call_events";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[call_leg_id]", filterCallLegId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[call_session_id]", filterCallSessionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[status]", filterStatus));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[type]", filterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[event_timestamp][gt]", filterEventTimestampGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[event_timestamp][gte]", filterEventTimestampGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[event_timestamp][lt]", filterEventTimestampLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[event_timestamp][lte]", filterEventTimestampLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[event_timestamp][eq]", filterEventTimestampEq));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistCallEventsRequest {
    private UUID filterCallLegId; // The unique identifier of an individual call leg. (optional)
    private UUID filterCallSessionId; // The unique identifier of the call control session. A session may include multiple call leg events. (optional)
    private String filterStatus; // Event status (optional)
    private String filterType; // Event type (optional)
    private String filterEventTimestampGt; // Event timestamp: greater than (optional)
    private String filterEventTimestampGte; // Event timestamp: greater than or equal (optional)
    private String filterEventTimestampLt; // Event timestamp: lower than (optional)
    private String filterEventTimestampLte; // Event timestamp: lower than or equal (optional)
    private String filterEventTimestampEq; // Event timestamp: equal (optional)

    private APIlistCallEventsRequest(Builder builder) {
      this.filterCallLegId = builder.filterCallLegId;
      this.filterCallSessionId = builder.filterCallSessionId;
      this.filterStatus = builder.filterStatus;
      this.filterType = builder.filterType;
      this.filterEventTimestampGt = builder.filterEventTimestampGt;
      this.filterEventTimestampGte = builder.filterEventTimestampGte;
      this.filterEventTimestampLt = builder.filterEventTimestampLt;
      this.filterEventTimestampLte = builder.filterEventTimestampLte;
      this.filterEventTimestampEq = builder.filterEventTimestampEq;
    }
    public UUID filterCallLegId() {
      return filterCallLegId;
    }
    public UUID filterCallSessionId() {
      return filterCallSessionId;
    }
    public String filterStatus() {
      return filterStatus;
    }
    public String filterType() {
      return filterType;
    }
    public String filterEventTimestampGt() {
      return filterEventTimestampGt;
    }
    public String filterEventTimestampGte() {
      return filterEventTimestampGte;
    }
    public String filterEventTimestampLt() {
      return filterEventTimestampLt;
    }
    public String filterEventTimestampLte() {
      return filterEventTimestampLte;
    }
    public String filterEventTimestampEq() {
      return filterEventTimestampEq;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private UUID filterCallLegId;
      private UUID filterCallSessionId;
      private String filterStatus;
      private String filterType;
      private String filterEventTimestampGt;
      private String filterEventTimestampGte;
      private String filterEventTimestampLt;
      private String filterEventTimestampLte;
      private String filterEventTimestampEq;

      public Builder filterCallLegId(UUID filterCallLegId) {
        this.filterCallLegId = filterCallLegId;
        return this;
      }
      public Builder filterCallSessionId(UUID filterCallSessionId) {
        this.filterCallSessionId = filterCallSessionId;
        return this;
      }
      public Builder filterStatus(String filterStatus) {
        this.filterStatus = filterStatus;
        return this;
      }
      public Builder filterType(String filterType) {
        this.filterType = filterType;
        return this;
      }
      public Builder filterEventTimestampGt(String filterEventTimestampGt) {
        this.filterEventTimestampGt = filterEventTimestampGt;
        return this;
      }
      public Builder filterEventTimestampGte(String filterEventTimestampGte) {
        this.filterEventTimestampGte = filterEventTimestampGte;
        return this;
      }
      public Builder filterEventTimestampLt(String filterEventTimestampLt) {
        this.filterEventTimestampLt = filterEventTimestampLt;
        return this;
      }
      public Builder filterEventTimestampLte(String filterEventTimestampLte) {
        this.filterEventTimestampLte = filterEventTimestampLte;
        return this;
      }
      public Builder filterEventTimestampEq(String filterEventTimestampEq) {
        this.filterEventTimestampEq = filterEventTimestampEq;
        return this;
      }
      public APIlistCallEventsRequest build() {
        return new APIlistCallEventsRequest(this);
      }
    }
  }

}
