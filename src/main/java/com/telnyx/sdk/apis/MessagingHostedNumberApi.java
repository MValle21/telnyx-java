/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.CreateMessagingHostedNumberOrderRequest;
import com.telnyx.sdk.models.Errors;
import java.io.File;
import com.telnyx.sdk.models.ListMessagingHostedNumberOrderResponse;
import com.telnyx.sdk.models.RetrieveMessagingHostedNumberOrderResponse;
import com.telnyx.sdk.models.RetrieveMessagingHostedNumberResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MessagingHostedNumberApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public MessagingHostedNumberApi() {
    this(new ApiClient());
  }

  public MessagingHostedNumberApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Create a messaging hosted number order
   * 
   * @param createMessagingHostedNumberOrderRequest Message payload (optional)
   * @return CompletableFuture&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingHostedNumberOrderResponse> createMessagingHostedNumberOrder(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createMessagingHostedNumberOrderRequestBuilder(createMessagingHostedNumberOrderRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a messaging hosted number order
   * 
   * @param createMessagingHostedNumberOrderRequest Message payload (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingHostedNumberOrderResponse>> createMessagingHostedNumberOrderWithHttpInfo(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createMessagingHostedNumberOrderRequestBuilder(createMessagingHostedNumberOrderRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingHostedNumberOrderResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createMessagingHostedNumberOrderRequestBuilder(CreateMessagingHostedNumberOrderRequest createMessagingHostedNumberOrderRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_hosted_number_orders";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createMessagingHostedNumberOrderRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a messaging hosted number
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;RetrieveMessagingHostedNumberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingHostedNumberResponse> deleteMessagingHostedNumber(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteMessagingHostedNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteMessagingHostedNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a messaging hosted number
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingHostedNumberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingHostedNumberResponse>> deleteMessagingHostedNumberWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteMessagingHostedNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteMessagingHostedNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingHostedNumberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteMessagingHostedNumberRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteMessagingHostedNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_hosted_numbers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List messaging hosted number orders
   * 
   * @return CompletableFuture&lt;ListMessagingHostedNumberOrderResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingHostedNumberOrderResponse> listMessagingHostedNumberOrder() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingHostedNumberOrderRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingHostedNumberOrderResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List messaging hosted number orders
   * 
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingHostedNumberOrderResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingHostedNumberOrderResponse>> listMessagingHostedNumberOrderWithHttpInfo() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingHostedNumberOrderRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingHostedNumberOrderResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingHostedNumberOrderResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listMessagingHostedNumberOrderRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_hosted_number_orders";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a messaging hosted number order
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingHostedNumberOrderResponse> retrieveMessagingHostedNumberOrder(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveMessagingHostedNumberOrderRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a messaging hosted number order
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingHostedNumberOrderResponse>> retrieveMessagingHostedNumberOrderWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveMessagingHostedNumberOrderRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingHostedNumberOrderResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveMessagingHostedNumberOrderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveMessagingHostedNumberOrder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_hosted_number_orders/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upload file required for a messaging hosted number order
   * 
   * @param id Identifies the type of resource. (required)
   * @param loa Must be a signed LOA for the numbers in the order in PDF format. (optional)
   * @param bill Must be the last month&#39;s bill with proof of ownership of all of the numbers in the order in PDF format. (optional)
   * @return CompletableFuture&lt;RetrieveMessagingHostedNumberOrderResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingHostedNumberOrderResponse> uploadFileMessagingHostedNumberOrder(String id, File loa, File bill) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = uploadFileMessagingHostedNumberOrderRequestBuilder(id, loa, bill);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("uploadFileMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Upload file required for a messaging hosted number order
   * 
   * @param id Identifies the type of resource. (required)
   * @param loa Must be a signed LOA for the numbers in the order in PDF format. (optional)
   * @param bill Must be the last month&#39;s bill with proof of ownership of all of the numbers in the order in PDF format. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingHostedNumberOrderResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingHostedNumberOrderResponse>> uploadFileMessagingHostedNumberOrderWithHttpInfo(String id, File loa, File bill) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = uploadFileMessagingHostedNumberOrderRequestBuilder(id, loa, bill);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("uploadFileMessagingHostedNumberOrder", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingHostedNumberOrderResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingHostedNumberOrderResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder uploadFileMessagingHostedNumberOrderRequestBuilder(String id, File loa, File bill) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling uploadFileMessagingHostedNumberOrder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_hosted_number_orders/{id}/actions/file_upload"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
