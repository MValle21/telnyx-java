/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.CreateMessagingProfileRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListMessagingProfileMetricsResponse;
import com.telnyx.sdk.models.ListMessagingProfilePhoneNumbersResponse;
import com.telnyx.sdk.models.ListMessagingProfileShortCodesResponse;
import com.telnyx.sdk.models.ListMessagingProfilesResponse;
import com.telnyx.sdk.models.MessagingProfileResponse;
import com.telnyx.sdk.models.RetrieveMessagingProfileMetricsResponse;
import java.util.UUID;
import com.telnyx.sdk.models.UpdateMessagingProfileRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MessagingProfilesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public MessagingProfilesApi() {
    this(new ApiClient());
  }

  public MessagingProfilesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Create a messaging profile
   * 
   * @param createMessagingProfileRequest New Messaging Profile object (required)
   * @return CompletableFuture&lt;MessagingProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MessagingProfileResponse> createMessagingProfile(CreateMessagingProfileRequest createMessagingProfileRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createMessagingProfileRequestBuilder(createMessagingProfileRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a messaging profile
   * 
   * @param createMessagingProfileRequest New Messaging Profile object (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MessagingProfileResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MessagingProfileResponse>> createMessagingProfileWithHttpInfo(CreateMessagingProfileRequest createMessagingProfileRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createMessagingProfileRequestBuilder(createMessagingProfileRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MessagingProfileResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createMessagingProfileRequestBuilder(CreateMessagingProfileRequest createMessagingProfileRequest) throws ApiException {
    // verify the required parameter 'createMessagingProfileRequest' is set
    if (createMessagingProfileRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createMessagingProfileRequest' when calling createMessagingProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createMessagingProfileRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @return CompletableFuture&lt;MessagingProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MessagingProfileResponse> deleteMessagingProfile(UUID id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteMessagingProfileRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MessagingProfileResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MessagingProfileResponse>> deleteMessagingProfileWithHttpInfo(UUID id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteMessagingProfileRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MessagingProfileResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteMessagingProfileRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteMessagingProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve messaging profile metrics
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
   * @return CompletableFuture&lt;RetrieveMessagingProfileMetricsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingProfileMetricsResponse> getMessagingProfileDetailedMetrics(UUID id, String timeFrame) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getMessagingProfileDetailedMetricsRequestBuilder(id, timeFrame);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getMessagingProfileDetailedMetrics", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingProfileMetricsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve messaging profile metrics
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingProfileMetricsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingProfileMetricsResponse>> getMessagingProfileDetailedMetricsWithHttpInfo(UUID id, String timeFrame) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getMessagingProfileDetailedMetricsRequestBuilder(id, timeFrame);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getMessagingProfileDetailedMetrics", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingProfileMetricsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingProfileMetricsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getMessagingProfileDetailedMetricsRequestBuilder(UUID id, String timeFrame) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getMessagingProfileDetailedMetrics");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}/metrics"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time_frame", timeFrame));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List messaging profile metrics
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param id The id of the messaging profile(s) to retrieve (optional)
   * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
   * @return CompletableFuture&lt;ListMessagingProfileMetricsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingProfileMetricsResponse> listMessagingProfileMetrics(Integer pageNumber, Integer pageSize, UUID id, String timeFrame) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfileMetricsRequestBuilder(pageNumber, pageSize, id, timeFrame);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfileMetrics", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfileMetricsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List messaging profile metrics
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param id The id of the messaging profile(s) to retrieve (optional)
   * @param timeFrame The timeframe for which you&#39;d like to retrieve metrics. (optional, default to 24h)
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingProfileMetricsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingProfileMetricsResponse>> listMessagingProfileMetricsWithHttpInfo(Integer pageNumber, Integer pageSize, UUID id, String timeFrame) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfileMetricsRequestBuilder(pageNumber, pageSize, id, timeFrame);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfileMetrics", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingProfileMetricsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfileMetricsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listMessagingProfileMetricsRequestBuilder(Integer pageNumber, Integer pageSize, UUID id, String timeFrame) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profile_metrics";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time_frame", timeFrame));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List phone numbers associated with a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListMessagingProfilePhoneNumbersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingProfilePhoneNumbersResponse> listMessagingProfilePhoneNumbers(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfilePhoneNumbersRequestBuilder(id, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfilePhoneNumbers", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfilePhoneNumbersResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List phone numbers associated with a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingProfilePhoneNumbersResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingProfilePhoneNumbersResponse>> listMessagingProfilePhoneNumbersWithHttpInfo(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfilePhoneNumbersRequestBuilder(id, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfilePhoneNumbers", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingProfilePhoneNumbersResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfilePhoneNumbersResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listMessagingProfilePhoneNumbersRequestBuilder(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listMessagingProfilePhoneNumbers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}/phone_numbers"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List short codes associated with a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListMessagingProfileShortCodesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingProfileShortCodesResponse> listMessagingProfileShortCodes(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfileShortCodesRequestBuilder(id, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfileShortCodes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfileShortCodesResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List short codes associated with a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingProfileShortCodesResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingProfileShortCodesResponse>> listMessagingProfileShortCodesWithHttpInfo(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfileShortCodesRequestBuilder(id, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfileShortCodes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingProfileShortCodesResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfileShortCodesResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listMessagingProfileShortCodesRequestBuilder(UUID id, Integer pageNumber, Integer pageSize) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listMessagingProfileShortCodes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}/short_codes"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List messaging profiles
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListMessagingProfilesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingProfilesResponse> listMessagingProfiles(Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfilesRequestBuilder(pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfiles", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfilesResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List messaging profiles
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingProfilesResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingProfilesResponse>> listMessagingProfilesWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listMessagingProfilesRequestBuilder(pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listMessagingProfiles", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingProfilesResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingProfilesResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listMessagingProfilesRequestBuilder(Integer pageNumber, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @return CompletableFuture&lt;MessagingProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MessagingProfileResponse> retrieveMessagingProfile(UUID id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveMessagingProfileRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MessagingProfileResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MessagingProfileResponse>> retrieveMessagingProfileWithHttpInfo(UUID id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveMessagingProfileRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MessagingProfileResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveMessagingProfileRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveMessagingProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param updateMessagingProfileRequest New Messaging Profile object (required)
   * @return CompletableFuture&lt;MessagingProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MessagingProfileResponse> updateMessagingProfile(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateMessagingProfileRequestBuilder(id, updateMessagingProfileRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a messaging profile
   * 
   * @param id The id of the messaging profile to retrieve (required)
   * @param updateMessagingProfileRequest New Messaging Profile object (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MessagingProfileResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MessagingProfileResponse>> updateMessagingProfileWithHttpInfo(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateMessagingProfileRequestBuilder(id, updateMessagingProfileRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateMessagingProfile", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MessagingProfileResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MessagingProfileResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateMessagingProfileRequestBuilder(UUID id, UpdateMessagingProfileRequest updateMessagingProfileRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateMessagingProfile");
    }
    // verify the required parameter 'updateMessagingProfileRequest' is set
    if (updateMessagingProfileRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateMessagingProfileRequest' when calling updateMessagingProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/messaging_profiles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateMessagingProfileRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
