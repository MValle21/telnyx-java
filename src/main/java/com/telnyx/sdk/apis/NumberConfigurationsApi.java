/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListMessagingSettingsResponse;
import com.telnyx.sdk.models.ListPhoneNumbersResponse;
import com.telnyx.sdk.models.ListPhoneNumbersWithVoiceSettingsResponse;
import com.telnyx.sdk.models.PhoneNumberEnableEmergency;
import com.telnyx.sdk.models.PhoneNumberEnableEmergencyRequest;
import com.telnyx.sdk.models.PhoneNumberResponse;
import com.telnyx.sdk.models.RetrieveMessagingSettingsResponse;
import com.telnyx.sdk.models.RetrievePhoneNumberVoiceResponse;
import com.telnyx.sdk.models.UpdatePhoneNumberMessagingSettingsRequest;
import com.telnyx.sdk.models.UpdatePhoneNumberRequest;
import com.telnyx.sdk.models.UpdatePhoneNumberVoiceSettingsRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NumberConfigurationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public NumberConfigurationsApi() {
    this(new ApiClient());
  }

  public NumberConfigurationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Delete a phone number
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;PhoneNumberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<PhoneNumberResponse> deletePhoneNumber(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deletePhoneNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deletePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a phone number
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;PhoneNumberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<PhoneNumberResponse>> deletePhoneNumberWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deletePhoneNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deletePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<PhoneNumberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deletePhoneNumberRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deletePhoneNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Enable emergency for a phone number
   * 
   * @param id Identifies the resource. (required)
   * @param phoneNumberEnableEmergencyRequest  (required)
   * @return CompletableFuture&lt;PhoneNumberEnableEmergency&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<PhoneNumberEnableEmergency> enableEmergencyPhoneNumber(String id, PhoneNumberEnableEmergencyRequest phoneNumberEnableEmergencyRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = enableEmergencyPhoneNumberRequestBuilder(id, phoneNumberEnableEmergencyRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("enableEmergencyPhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberEnableEmergency>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Enable emergency for a phone number
   * 
   * @param id Identifies the resource. (required)
   * @param phoneNumberEnableEmergencyRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;PhoneNumberEnableEmergency&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<PhoneNumberEnableEmergency>> enableEmergencyPhoneNumberWithHttpInfo(String id, PhoneNumberEnableEmergencyRequest phoneNumberEnableEmergencyRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = enableEmergencyPhoneNumberRequestBuilder(id, phoneNumberEnableEmergencyRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("enableEmergencyPhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<PhoneNumberEnableEmergency>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberEnableEmergency>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder enableEmergencyPhoneNumberRequestBuilder(String id, PhoneNumberEnableEmergencyRequest phoneNumberEnableEmergencyRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling enableEmergencyPhoneNumber");
    }
    // verify the required parameter 'phoneNumberEnableEmergencyRequest' is set
    if (phoneNumberEnableEmergencyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'phoneNumberEnableEmergencyRequest' when calling enableEmergencyPhoneNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}/actions/enable_emergency"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(phoneNumberEnableEmergencyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List phone numbers
   * 
   * @param listPhoneNumbersRequest {@link APIlistPhoneNumbersRequest}
   * @return CompletableFuture&lt;ListPhoneNumbersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListPhoneNumbersResponse> listPhoneNumbers(APIlistPhoneNumbersRequest listPhoneNumbersRequest) throws ApiException {
    Integer pageNumber = listPhoneNumbersRequest.pageNumber();
    Integer pageSize = listPhoneNumbersRequest.pageSize();
    String filterTag = listPhoneNumbersRequest.filterTag();
    String filterPhoneNumber = listPhoneNumbersRequest.filterPhoneNumber();
    String filterStatus = listPhoneNumbersRequest.filterStatus();
    String filterVoiceConnectionNameContains = listPhoneNumbersRequest.filterVoiceConnectionNameContains();
    String filterVoiceConnectionNameStartsWith = listPhoneNumbersRequest.filterVoiceConnectionNameStartsWith();
    String filterVoiceConnectionNameEndsWith = listPhoneNumbersRequest.filterVoiceConnectionNameEndsWith();
    String filterVoiceConnectionNameEq = listPhoneNumbersRequest.filterVoiceConnectionNameEq();
    String filterUsagePaymentMethod = listPhoneNumbersRequest.filterUsagePaymentMethod();
    String filterBillingGroupId = listPhoneNumbersRequest.filterBillingGroupId();
    String sort = listPhoneNumbersRequest.sort();
    return listPhoneNumbers(pageNumber, pageSize, filterTag, filterPhoneNumber, filterStatus, filterVoiceConnectionNameContains, filterVoiceConnectionNameStartsWith, filterVoiceConnectionNameEndsWith, filterVoiceConnectionNameEq, filterUsagePaymentMethod, filterBillingGroupId, sort);
  }

  /**
   * List phone numbers
   * 
   * @param listPhoneNumbersRequest {@link APIlistPhoneNumbersRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListPhoneNumbersResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListPhoneNumbersResponse>> listPhoneNumbersWithHttpInfo(APIlistPhoneNumbersRequest listPhoneNumbersRequest) throws ApiException {
    Integer pageNumber = listPhoneNumbersRequest.pageNumber();
    Integer pageSize = listPhoneNumbersRequest.pageSize();
    String filterTag = listPhoneNumbersRequest.filterTag();
    String filterPhoneNumber = listPhoneNumbersRequest.filterPhoneNumber();
    String filterStatus = listPhoneNumbersRequest.filterStatus();
    String filterVoiceConnectionNameContains = listPhoneNumbersRequest.filterVoiceConnectionNameContains();
    String filterVoiceConnectionNameStartsWith = listPhoneNumbersRequest.filterVoiceConnectionNameStartsWith();
    String filterVoiceConnectionNameEndsWith = listPhoneNumbersRequest.filterVoiceConnectionNameEndsWith();
    String filterVoiceConnectionNameEq = listPhoneNumbersRequest.filterVoiceConnectionNameEq();
    String filterUsagePaymentMethod = listPhoneNumbersRequest.filterUsagePaymentMethod();
    String filterBillingGroupId = listPhoneNumbersRequest.filterBillingGroupId();
    String sort = listPhoneNumbersRequest.sort();
    return listPhoneNumbersWithHttpInfo(pageNumber, pageSize, filterTag, filterPhoneNumber, filterStatus, filterVoiceConnectionNameContains, filterVoiceConnectionNameStartsWith, filterVoiceConnectionNameEndsWith, filterVoiceConnectionNameEq, filterUsagePaymentMethod, filterBillingGroupId, sort);
  }

  /**
   * List phone numbers
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterTag Filter by phone number tags. (optional)
   * @param filterPhoneNumber Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned. (optional)
   * @param filterStatus Filter by phone number status. (optional)
   * @param filterVoiceConnectionNameContains Filter contains connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameStartsWith Filter starts with connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameEndsWith Filter ends with connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameEq Filter by connection name. (optional)
   * @param filterUsagePaymentMethod Filter by usage_payment_method. (optional)
   * @param filterBillingGroupId Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;. (optional)
   * @param sort Specifies the sort order for results. If not given, results are sorted by created_at in descending order. (optional)
   * @return CompletableFuture&lt;ListPhoneNumbersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListPhoneNumbersResponse> listPhoneNumbers(Integer pageNumber, Integer pageSize, String filterTag, String filterPhoneNumber, String filterStatus, String filterVoiceConnectionNameContains, String filterVoiceConnectionNameStartsWith, String filterVoiceConnectionNameEndsWith, String filterVoiceConnectionNameEq, String filterUsagePaymentMethod, String filterBillingGroupId, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersRequestBuilder(pageNumber, pageSize, filterTag, filterPhoneNumber, filterStatus, filterVoiceConnectionNameContains, filterVoiceConnectionNameStartsWith, filterVoiceConnectionNameEndsWith, filterVoiceConnectionNameEq, filterUsagePaymentMethod, filterBillingGroupId, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbers", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListPhoneNumbersResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List phone numbers
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterTag Filter by phone number tags. (optional)
   * @param filterPhoneNumber Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned. (optional)
   * @param filterStatus Filter by phone number status. (optional)
   * @param filterVoiceConnectionNameContains Filter contains connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameStartsWith Filter starts with connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameEndsWith Filter ends with connection name. Requires at least three characters. (optional)
   * @param filterVoiceConnectionNameEq Filter by connection name. (optional)
   * @param filterUsagePaymentMethod Filter by usage_payment_method. (optional)
   * @param filterBillingGroupId Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;. (optional)
   * @param sort Specifies the sort order for results. If not given, results are sorted by created_at in descending order. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ListPhoneNumbersResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListPhoneNumbersResponse>> listPhoneNumbersWithHttpInfo(Integer pageNumber, Integer pageSize, String filterTag, String filterPhoneNumber, String filterStatus, String filterVoiceConnectionNameContains, String filterVoiceConnectionNameStartsWith, String filterVoiceConnectionNameEndsWith, String filterVoiceConnectionNameEq, String filterUsagePaymentMethod, String filterBillingGroupId, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersRequestBuilder(pageNumber, pageSize, filterTag, filterPhoneNumber, filterStatus, filterVoiceConnectionNameContains, filterVoiceConnectionNameStartsWith, filterVoiceConnectionNameEndsWith, filterVoiceConnectionNameEq, filterUsagePaymentMethod, filterBillingGroupId, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbers", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListPhoneNumbersResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListPhoneNumbersResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listPhoneNumbersRequestBuilder(Integer pageNumber, Integer pageSize, String filterTag, String filterPhoneNumber, String filterStatus, String filterVoiceConnectionNameContains, String filterVoiceConnectionNameStartsWith, String filterVoiceConnectionNameEndsWith, String filterVoiceConnectionNameEq, String filterUsagePaymentMethod, String filterBillingGroupId, String sort) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[tag]", filterTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[phone_number]", filterPhoneNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[status]", filterStatus));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[voice.connection_name][contains]", filterVoiceConnectionNameContains));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[voice.connection_name][starts_with]", filterVoiceConnectionNameStartsWith));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[voice.connection_name][ends_with]", filterVoiceConnectionNameEndsWith));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[voice.connection_name][eq]", filterVoiceConnectionNameEq));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[usage_payment_method]", filterUsagePaymentMethod));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[billing_group_id]", filterBillingGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistPhoneNumbersRequest {
    private Integer pageNumber; // The page number to load (optional, default to 1)
    private Integer pageSize; // The size of the page (optional, default to 20)
    private String filterTag; // Filter by phone number tags. (optional)
    private String filterPhoneNumber; // Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned. (optional)
    private String filterStatus; // Filter by phone number status. (optional)
    private String filterVoiceConnectionNameContains; // Filter contains connection name. Requires at least three characters. (optional)
    private String filterVoiceConnectionNameStartsWith; // Filter starts with connection name. Requires at least three characters. (optional)
    private String filterVoiceConnectionNameEndsWith; // Filter ends with connection name. Requires at least three characters. (optional)
    private String filterVoiceConnectionNameEq; // Filter by connection name. (optional)
    private String filterUsagePaymentMethod; // Filter by usage_payment_method. (optional)
    private String filterBillingGroupId; // Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;. (optional)
    private String sort; // Specifies the sort order for results. If not given, results are sorted by created_at in descending order. (optional)

    private APIlistPhoneNumbersRequest(Builder builder) {
      this.pageNumber = builder.pageNumber;
      this.pageSize = builder.pageSize;
      this.filterTag = builder.filterTag;
      this.filterPhoneNumber = builder.filterPhoneNumber;
      this.filterStatus = builder.filterStatus;
      this.filterVoiceConnectionNameContains = builder.filterVoiceConnectionNameContains;
      this.filterVoiceConnectionNameStartsWith = builder.filterVoiceConnectionNameStartsWith;
      this.filterVoiceConnectionNameEndsWith = builder.filterVoiceConnectionNameEndsWith;
      this.filterVoiceConnectionNameEq = builder.filterVoiceConnectionNameEq;
      this.filterUsagePaymentMethod = builder.filterUsagePaymentMethod;
      this.filterBillingGroupId = builder.filterBillingGroupId;
      this.sort = builder.sort;
    }
    public Integer pageNumber() {
      return pageNumber;
    }
    public Integer pageSize() {
      return pageSize;
    }
    public String filterTag() {
      return filterTag;
    }
    public String filterPhoneNumber() {
      return filterPhoneNumber;
    }
    public String filterStatus() {
      return filterStatus;
    }
    public String filterVoiceConnectionNameContains() {
      return filterVoiceConnectionNameContains;
    }
    public String filterVoiceConnectionNameStartsWith() {
      return filterVoiceConnectionNameStartsWith;
    }
    public String filterVoiceConnectionNameEndsWith() {
      return filterVoiceConnectionNameEndsWith;
    }
    public String filterVoiceConnectionNameEq() {
      return filterVoiceConnectionNameEq;
    }
    public String filterUsagePaymentMethod() {
      return filterUsagePaymentMethod;
    }
    public String filterBillingGroupId() {
      return filterBillingGroupId;
    }
    public String sort() {
      return sort;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private Integer pageNumber;
      private Integer pageSize;
      private String filterTag;
      private String filterPhoneNumber;
      private String filterStatus;
      private String filterVoiceConnectionNameContains;
      private String filterVoiceConnectionNameStartsWith;
      private String filterVoiceConnectionNameEndsWith;
      private String filterVoiceConnectionNameEq;
      private String filterUsagePaymentMethod;
      private String filterBillingGroupId;
      private String sort;

      public Builder pageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
      }
      public Builder pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }
      public Builder filterTag(String filterTag) {
        this.filterTag = filterTag;
        return this;
      }
      public Builder filterPhoneNumber(String filterPhoneNumber) {
        this.filterPhoneNumber = filterPhoneNumber;
        return this;
      }
      public Builder filterStatus(String filterStatus) {
        this.filterStatus = filterStatus;
        return this;
      }
      public Builder filterVoiceConnectionNameContains(String filterVoiceConnectionNameContains) {
        this.filterVoiceConnectionNameContains = filterVoiceConnectionNameContains;
        return this;
      }
      public Builder filterVoiceConnectionNameStartsWith(String filterVoiceConnectionNameStartsWith) {
        this.filterVoiceConnectionNameStartsWith = filterVoiceConnectionNameStartsWith;
        return this;
      }
      public Builder filterVoiceConnectionNameEndsWith(String filterVoiceConnectionNameEndsWith) {
        this.filterVoiceConnectionNameEndsWith = filterVoiceConnectionNameEndsWith;
        return this;
      }
      public Builder filterVoiceConnectionNameEq(String filterVoiceConnectionNameEq) {
        this.filterVoiceConnectionNameEq = filterVoiceConnectionNameEq;
        return this;
      }
      public Builder filterUsagePaymentMethod(String filterUsagePaymentMethod) {
        this.filterUsagePaymentMethod = filterUsagePaymentMethod;
        return this;
      }
      public Builder filterBillingGroupId(String filterBillingGroupId) {
        this.filterBillingGroupId = filterBillingGroupId;
        return this;
      }
      public Builder sort(String sort) {
        this.sort = sort;
        return this;
      }
      public APIlistPhoneNumbersRequest build() {
        return new APIlistPhoneNumbersRequest(this);
      }
    }
  }

  /**
   * List phone numbers with messaging settings
   * 
   * @return CompletableFuture&lt;ListMessagingSettingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListMessagingSettingsResponse> listPhoneNumbersWithMessagingSettings() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersWithMessagingSettingsRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbersWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingSettingsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List phone numbers with messaging settings
   * 
   * @return CompletableFuture&lt;ApiResponse&lt;ListMessagingSettingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListMessagingSettingsResponse>> listPhoneNumbersWithMessagingSettingsWithHttpInfo() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersWithMessagingSettingsRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbersWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListMessagingSettingsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListMessagingSettingsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listPhoneNumbersWithMessagingSettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/messaging";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List phone numbers with voice settings
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterPhoneNumber Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned. (optional)
   * @param filterConnectionNameContains Filter contains connection name. Requires at least three characters. (optional)
   * @param filterUsagePaymentMethod Filter by usage_payment_method. (optional)
   * @param sort Specifies the sort order for results. If not given, results are sorted by created_at in descending order. (optional)
   * @return CompletableFuture&lt;ListPhoneNumbersWithVoiceSettingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListPhoneNumbersWithVoiceSettingsResponse> listPhoneNumbersWithVoiceSettings(Integer pageNumber, Integer pageSize, String filterPhoneNumber, String filterConnectionNameContains, String filterUsagePaymentMethod, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersWithVoiceSettingsRequestBuilder(pageNumber, pageSize, filterPhoneNumber, filterConnectionNameContains, filterUsagePaymentMethod, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbersWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListPhoneNumbersWithVoiceSettingsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List phone numbers with voice settings
   * 
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @param filterPhoneNumber Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned. (optional)
   * @param filterConnectionNameContains Filter contains connection name. Requires at least three characters. (optional)
   * @param filterUsagePaymentMethod Filter by usage_payment_method. (optional)
   * @param sort Specifies the sort order for results. If not given, results are sorted by created_at in descending order. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ListPhoneNumbersWithVoiceSettingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListPhoneNumbersWithVoiceSettingsResponse>> listPhoneNumbersWithVoiceSettingsWithHttpInfo(Integer pageNumber, Integer pageSize, String filterPhoneNumber, String filterConnectionNameContains, String filterUsagePaymentMethod, String sort) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listPhoneNumbersWithVoiceSettingsRequestBuilder(pageNumber, pageSize, filterPhoneNumber, filterConnectionNameContains, filterUsagePaymentMethod, sort);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listPhoneNumbersWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListPhoneNumbersWithVoiceSettingsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListPhoneNumbersWithVoiceSettingsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listPhoneNumbersWithVoiceSettingsRequestBuilder(Integer pageNumber, Integer pageSize, String filterPhoneNumber, String filterConnectionNameContains, String filterUsagePaymentMethod, String sort) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/voice";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[phone_number]", filterPhoneNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[connection_name][contains]", filterConnectionNameContains));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[usage_payment_method]", filterUsagePaymentMethod));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a phone number
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;PhoneNumberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<PhoneNumberResponse> retrievePhoneNumber(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a phone number
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;PhoneNumberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<PhoneNumberResponse>> retrievePhoneNumberWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<PhoneNumberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrievePhoneNumberRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrievePhoneNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a phone number with messaging settings
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;RetrieveMessagingSettingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingSettingsResponse> retrievePhoneNumberWithMessagingSettings(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberWithMessagingSettingsRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumberWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingSettingsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a phone number with messaging settings
   * 
   * @param id Identifies the type of resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingSettingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingSettingsResponse>> retrievePhoneNumberWithMessagingSettingsWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberWithMessagingSettingsRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumberWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingSettingsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingSettingsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrievePhoneNumberWithMessagingSettingsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrievePhoneNumberWithMessagingSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}/messaging"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve a phone number with voice settings
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;RetrievePhoneNumberVoiceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrievePhoneNumberVoiceResponse> retrievePhoneNumberWithVoiceSettings(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberWithVoiceSettingsRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumberWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrievePhoneNumberVoiceResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a phone number with voice settings
   * 
   * @param id Identifies the resource. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrievePhoneNumberVoiceResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrievePhoneNumberVoiceResponse>> retrievePhoneNumberWithVoiceSettingsWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrievePhoneNumberWithVoiceSettingsRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrievePhoneNumberWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrievePhoneNumberVoiceResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrievePhoneNumberVoiceResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrievePhoneNumberWithVoiceSettingsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrievePhoneNumberWithVoiceSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}/voice"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a phone number
   * 
   * @param id Identifies the resource. (required)
   * @param updatePhoneNumberRequest Updated settings for the phone number. (required)
   * @return CompletableFuture&lt;PhoneNumberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<PhoneNumberResponse> updatePhoneNumber(String id, UpdatePhoneNumberRequest updatePhoneNumberRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberRequestBuilder(id, updatePhoneNumberRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a phone number
   * 
   * @param id Identifies the resource. (required)
   * @param updatePhoneNumberRequest Updated settings for the phone number. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;PhoneNumberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<PhoneNumberResponse>> updatePhoneNumberWithHttpInfo(String id, UpdatePhoneNumberRequest updatePhoneNumberRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberRequestBuilder(id, updatePhoneNumberRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumber", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<PhoneNumberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhoneNumberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updatePhoneNumberRequestBuilder(String id, UpdatePhoneNumberRequest updatePhoneNumberRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updatePhoneNumber");
    }
    // verify the required parameter 'updatePhoneNumberRequest' is set
    if (updatePhoneNumberRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePhoneNumberRequest' when calling updatePhoneNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updatePhoneNumberRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a phone number with messaging settings
   * 
   * @param id Identifies the type of resource. (required)
   * @param updatePhoneNumberMessagingSettingsRequest Updated messaging settings for the phone number (required)
   * @return CompletableFuture&lt;RetrieveMessagingSettingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrieveMessagingSettingsResponse> updatePhoneNumberWithMessagingSettings(String id, UpdatePhoneNumberMessagingSettingsRequest updatePhoneNumberMessagingSettingsRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberWithMessagingSettingsRequestBuilder(id, updatePhoneNumberMessagingSettingsRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumberWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingSettingsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a phone number with messaging settings
   * 
   * @param id Identifies the type of resource. (required)
   * @param updatePhoneNumberMessagingSettingsRequest Updated messaging settings for the phone number (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrieveMessagingSettingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrieveMessagingSettingsResponse>> updatePhoneNumberWithMessagingSettingsWithHttpInfo(String id, UpdatePhoneNumberMessagingSettingsRequest updatePhoneNumberMessagingSettingsRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberWithMessagingSettingsRequestBuilder(id, updatePhoneNumberMessagingSettingsRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumberWithMessagingSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrieveMessagingSettingsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrieveMessagingSettingsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updatePhoneNumberWithMessagingSettingsRequestBuilder(String id, UpdatePhoneNumberMessagingSettingsRequest updatePhoneNumberMessagingSettingsRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updatePhoneNumberWithMessagingSettings");
    }
    // verify the required parameter 'updatePhoneNumberMessagingSettingsRequest' is set
    if (updatePhoneNumberMessagingSettingsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePhoneNumberMessagingSettingsRequest' when calling updatePhoneNumberWithMessagingSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}/messaging"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updatePhoneNumberMessagingSettingsRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a phone number with voice settings
   * 
   * @param id Identifies the resource. (required)
   * @param updatePhoneNumberVoiceSettingsRequest Updated voice settings for the phone number. (required)
   * @return CompletableFuture&lt;RetrievePhoneNumberVoiceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RetrievePhoneNumberVoiceResponse> updatePhoneNumberWithVoiceSettings(String id, UpdatePhoneNumberVoiceSettingsRequest updatePhoneNumberVoiceSettingsRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberWithVoiceSettingsRequestBuilder(id, updatePhoneNumberVoiceSettingsRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumberWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrievePhoneNumberVoiceResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a phone number with voice settings
   * 
   * @param id Identifies the resource. (required)
   * @param updatePhoneNumberVoiceSettingsRequest Updated voice settings for the phone number. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RetrievePhoneNumberVoiceResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RetrievePhoneNumberVoiceResponse>> updatePhoneNumberWithVoiceSettingsWithHttpInfo(String id, UpdatePhoneNumberVoiceSettingsRequest updatePhoneNumberVoiceSettingsRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updatePhoneNumberWithVoiceSettingsRequestBuilder(id, updatePhoneNumberVoiceSettingsRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updatePhoneNumberWithVoiceSettings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RetrievePhoneNumberVoiceResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetrievePhoneNumberVoiceResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updatePhoneNumberWithVoiceSettingsRequestBuilder(String id, UpdatePhoneNumberVoiceSettingsRequest updatePhoneNumberVoiceSettingsRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updatePhoneNumberWithVoiceSettings");
    }
    // verify the required parameter 'updatePhoneNumberVoiceSettingsRequest' is set
    if (updatePhoneNumberVoiceSettingsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePhoneNumberVoiceSettingsRequest' when calling updatePhoneNumberWithVoiceSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/phone_numbers/{id}/voice"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updatePhoneNumberVoiceSettingsRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
