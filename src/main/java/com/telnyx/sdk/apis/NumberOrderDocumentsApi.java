/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.CreateNumberOrderDocumentRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberOrderDocumentsResponse;
import com.telnyx.sdk.models.NumberOrderDocumentResponse;
import com.telnyx.sdk.models.UpdateNumberOrderDocumentRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NumberOrderDocumentsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public NumberOrderDocumentsApi() {
    this(new ApiClient());
  }

  public NumberOrderDocumentsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Create a number order document
   * Upload a phone number order document.
   * @param createNumberOrderDocumentRequest  (required)
   * @return CompletableFuture&lt;NumberOrderDocumentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberOrderDocumentResponse> createNumberOrderDocument(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createNumberOrderDocumentRequestBuilder(createNumberOrderDocumentRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a number order document
   * Upload a phone number order document.
   * @param createNumberOrderDocumentRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberOrderDocumentResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberOrderDocumentResponse>> createNumberOrderDocumentWithHttpInfo(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createNumberOrderDocumentRequestBuilder(createNumberOrderDocumentRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberOrderDocumentResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createNumberOrderDocumentRequestBuilder(CreateNumberOrderDocumentRequest createNumberOrderDocumentRequest) throws ApiException {
    // verify the required parameter 'createNumberOrderDocumentRequest' is set
    if (createNumberOrderDocumentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createNumberOrderDocumentRequest' when calling createNumberOrderDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_order_documents";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createNumberOrderDocumentRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List number order documents
   * Gets a paginated list of number order documents.
   * @param listNumberOrderDocumentsRequest {@link APIlistNumberOrderDocumentsRequest}
   * @return CompletableFuture&lt;ListNumberOrderDocumentsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListNumberOrderDocumentsResponse> listNumberOrderDocuments(APIlistNumberOrderDocumentsRequest listNumberOrderDocumentsRequest) throws ApiException {
    String filterRequirementId = listNumberOrderDocumentsRequest.filterRequirementId();
    String filterCreatedAtGt = listNumberOrderDocumentsRequest.filterCreatedAtGt();
    String filterCreatedAtLt = listNumberOrderDocumentsRequest.filterCreatedAtLt();
    return listNumberOrderDocuments(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt);
  }

  /**
   * List number order documents
   * Gets a paginated list of number order documents.
   * @param listNumberOrderDocumentsRequest {@link APIlistNumberOrderDocumentsRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListNumberOrderDocumentsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListNumberOrderDocumentsResponse>> listNumberOrderDocumentsWithHttpInfo(APIlistNumberOrderDocumentsRequest listNumberOrderDocumentsRequest) throws ApiException {
    String filterRequirementId = listNumberOrderDocumentsRequest.filterRequirementId();
    String filterCreatedAtGt = listNumberOrderDocumentsRequest.filterCreatedAtGt();
    String filterCreatedAtLt = listNumberOrderDocumentsRequest.filterCreatedAtLt();
    return listNumberOrderDocumentsWithHttpInfo(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt);
  }

  /**
   * List number order documents
   * Gets a paginated list of number order documents.
   * @param filterRequirementId Filter number order documents by &#x60;requirement_id&#x60;. (optional)
   * @param filterCreatedAtGt Filter number order documents after this datetime. (optional)
   * @param filterCreatedAtLt Filter number order documents from before this datetime. (optional)
   * @return CompletableFuture&lt;ListNumberOrderDocumentsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListNumberOrderDocumentsResponse> listNumberOrderDocuments(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listNumberOrderDocumentsRequestBuilder(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listNumberOrderDocuments", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListNumberOrderDocumentsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List number order documents
   * Gets a paginated list of number order documents.
   * @param filterRequirementId Filter number order documents by &#x60;requirement_id&#x60;. (optional)
   * @param filterCreatedAtGt Filter number order documents after this datetime. (optional)
   * @param filterCreatedAtLt Filter number order documents from before this datetime. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ListNumberOrderDocumentsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListNumberOrderDocumentsResponse>> listNumberOrderDocumentsWithHttpInfo(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listNumberOrderDocumentsRequestBuilder(filterRequirementId, filterCreatedAtGt, filterCreatedAtLt);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listNumberOrderDocuments", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListNumberOrderDocumentsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListNumberOrderDocumentsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listNumberOrderDocumentsRequestBuilder(String filterRequirementId, String filterCreatedAtGt, String filterCreatedAtLt) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_order_documents";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[requirement_id]", filterRequirementId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][gt]", filterCreatedAtGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][lt]", filterCreatedAtLt));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistNumberOrderDocumentsRequest {
    private String filterRequirementId; // Filter number order documents by &#x60;requirement_id&#x60;. (optional)
    private String filterCreatedAtGt; // Filter number order documents after this datetime. (optional)
    private String filterCreatedAtLt; // Filter number order documents from before this datetime. (optional)

    private APIlistNumberOrderDocumentsRequest(Builder builder) {
      this.filterRequirementId = builder.filterRequirementId;
      this.filterCreatedAtGt = builder.filterCreatedAtGt;
      this.filterCreatedAtLt = builder.filterCreatedAtLt;
    }
    public String filterRequirementId() {
      return filterRequirementId;
    }
    public String filterCreatedAtGt() {
      return filterCreatedAtGt;
    }
    public String filterCreatedAtLt() {
      return filterCreatedAtLt;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private String filterRequirementId;
      private String filterCreatedAtGt;
      private String filterCreatedAtLt;

      public Builder filterRequirementId(String filterRequirementId) {
        this.filterRequirementId = filterRequirementId;
        return this;
      }
      public Builder filterCreatedAtGt(String filterCreatedAtGt) {
        this.filterCreatedAtGt = filterCreatedAtGt;
        return this;
      }
      public Builder filterCreatedAtLt(String filterCreatedAtLt) {
        this.filterCreatedAtLt = filterCreatedAtLt;
        return this;
      }
      public APIlistNumberOrderDocumentsRequest build() {
        return new APIlistNumberOrderDocumentsRequest(this);
      }
    }
  }

  /**
   * Retrieve a number order document
   * Gets a single number order document.
   * @param numberOrderDocumentId The number order document ID. (required)
   * @return CompletableFuture&lt;NumberOrderDocumentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberOrderDocumentResponse> retrieveNumberOrderDocument(String numberOrderDocumentId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveNumberOrderDocumentRequestBuilder(numberOrderDocumentId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a number order document
   * Gets a single number order document.
   * @param numberOrderDocumentId The number order document ID. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberOrderDocumentResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberOrderDocumentResponse>> retrieveNumberOrderDocumentWithHttpInfo(String numberOrderDocumentId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveNumberOrderDocumentRequestBuilder(numberOrderDocumentId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberOrderDocumentResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveNumberOrderDocumentRequestBuilder(String numberOrderDocumentId) throws ApiException {
    // verify the required parameter 'numberOrderDocumentId' is set
    if (numberOrderDocumentId == null) {
      throw new ApiException(400, "Missing the required parameter 'numberOrderDocumentId' when calling retrieveNumberOrderDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_order_documents/{number_order_document_id}"
        .replace("{number_order_document_id}", ApiClient.urlEncode(numberOrderDocumentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a number order document
   * Updates a number order document.
   * @param numberOrderDocumentId The number order document ID. (required)
   * @param updateNumberOrderDocumentRequest  (required)
   * @return CompletableFuture&lt;NumberOrderDocumentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberOrderDocumentResponse> updateNumberOrderDocument(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateNumberOrderDocumentRequestBuilder(numberOrderDocumentId, updateNumberOrderDocumentRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a number order document
   * Updates a number order document.
   * @param numberOrderDocumentId The number order document ID. (required)
   * @param updateNumberOrderDocumentRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberOrderDocumentResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberOrderDocumentResponse>> updateNumberOrderDocumentWithHttpInfo(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateNumberOrderDocumentRequestBuilder(numberOrderDocumentId, updateNumberOrderDocumentRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateNumberOrderDocument", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberOrderDocumentResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberOrderDocumentResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateNumberOrderDocumentRequestBuilder(String numberOrderDocumentId, UpdateNumberOrderDocumentRequest updateNumberOrderDocumentRequest) throws ApiException {
    // verify the required parameter 'numberOrderDocumentId' is set
    if (numberOrderDocumentId == null) {
      throw new ApiException(400, "Missing the required parameter 'numberOrderDocumentId' when calling updateNumberOrderDocument");
    }
    // verify the required parameter 'updateNumberOrderDocumentRequest' is set
    if (updateNumberOrderDocumentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateNumberOrderDocumentRequest' when calling updateNumberOrderDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_order_documents/{number_order_document_id}"
        .replace("{number_order_document_id}", ApiClient.urlEncode(numberOrderDocumentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateNumberOrderDocumentRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
