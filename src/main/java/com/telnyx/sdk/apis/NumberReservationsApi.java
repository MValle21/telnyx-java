/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.CreateNumberReservationRequest;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListNumberReservationsResponse;
import com.telnyx.sdk.models.NumberReservationResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NumberReservationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public NumberReservationsApi() {
    this(new ApiClient());
  }

  public NumberReservationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * Create a number reservation
   * Creates a Phone Number Reservation for multiple numbers.
   * @param createNumberReservationRequest  (required)
   * @return CompletableFuture&lt;NumberReservationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberReservationResponse> createNumberReservation(CreateNumberReservationRequest createNumberReservationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createNumberReservationRequestBuilder(createNumberReservationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createNumberReservation", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a number reservation
   * Creates a Phone Number Reservation for multiple numbers.
   * @param createNumberReservationRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberReservationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberReservationResponse>> createNumberReservationWithHttpInfo(CreateNumberReservationRequest createNumberReservationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createNumberReservationRequestBuilder(createNumberReservationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createNumberReservation", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberReservationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createNumberReservationRequestBuilder(CreateNumberReservationRequest createNumberReservationRequest) throws ApiException {
    // verify the required parameter 'createNumberReservationRequest' is set
    if (createNumberReservationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createNumberReservationRequest' when calling createNumberReservation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_reservations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createNumberReservationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Extend a number reservation
   * Extends reservation expiry time on all phone numbers.
   * @param numberReservationId The number reservation ID. (required)
   * @return CompletableFuture&lt;NumberReservationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberReservationResponse> extendNumberReservationExpiryTime(String numberReservationId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = extendNumberReservationExpiryTimeRequestBuilder(numberReservationId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("extendNumberReservationExpiryTime", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Extend a number reservation
   * Extends reservation expiry time on all phone numbers.
   * @param numberReservationId The number reservation ID. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberReservationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberReservationResponse>> extendNumberReservationExpiryTimeWithHttpInfo(String numberReservationId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = extendNumberReservationExpiryTimeRequestBuilder(numberReservationId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("extendNumberReservationExpiryTime", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberReservationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder extendNumberReservationExpiryTimeRequestBuilder(String numberReservationId) throws ApiException {
    // verify the required parameter 'numberReservationId' is set
    if (numberReservationId == null) {
      throw new ApiException(400, "Missing the required parameter 'numberReservationId' when calling extendNumberReservationExpiryTime");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_reservations/{number_reservation_id}/actions/extend"
        .replace("{number_reservation_id}", ApiClient.urlEncode(numberReservationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List number reservations
   * Gets a paginated list of phone number reservations.
   * @param listNumberReservationsRequest {@link APIlistNumberReservationsRequest}
   * @return CompletableFuture&lt;ListNumberReservationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListNumberReservationsResponse> listNumberReservations(APIlistNumberReservationsRequest listNumberReservationsRequest) throws ApiException {
    String filterStatus = listNumberReservationsRequest.filterStatus();
    String filterCreatedAtGt = listNumberReservationsRequest.filterCreatedAtGt();
    String filterCreatedAtLt = listNumberReservationsRequest.filterCreatedAtLt();
    String filterPhoneNumbersPhoneNumber = listNumberReservationsRequest.filterPhoneNumbersPhoneNumber();
    String filterCustomerReference = listNumberReservationsRequest.filterCustomerReference();
    return listNumberReservations(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference);
  }

  /**
   * List number reservations
   * Gets a paginated list of phone number reservations.
   * @param listNumberReservationsRequest {@link APIlistNumberReservationsRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListNumberReservationsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListNumberReservationsResponse>> listNumberReservationsWithHttpInfo(APIlistNumberReservationsRequest listNumberReservationsRequest) throws ApiException {
    String filterStatus = listNumberReservationsRequest.filterStatus();
    String filterCreatedAtGt = listNumberReservationsRequest.filterCreatedAtGt();
    String filterCreatedAtLt = listNumberReservationsRequest.filterCreatedAtLt();
    String filterPhoneNumbersPhoneNumber = listNumberReservationsRequest.filterPhoneNumbersPhoneNumber();
    String filterCustomerReference = listNumberReservationsRequest.filterCustomerReference();
    return listNumberReservationsWithHttpInfo(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference);
  }

  /**
   * List number reservations
   * Gets a paginated list of phone number reservations.
   * @param filterStatus Filter number reservations by status. (optional)
   * @param filterCreatedAtGt Filter number reservations later than this value. (optional)
   * @param filterCreatedAtLt Filter number reservations earlier than this value. (optional)
   * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers. (optional)
   * @param filterCustomerReference Filter number reservations via the customer reference set. (optional)
   * @return CompletableFuture&lt;ListNumberReservationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListNumberReservationsResponse> listNumberReservations(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listNumberReservationsRequestBuilder(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listNumberReservations", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListNumberReservationsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List number reservations
   * Gets a paginated list of phone number reservations.
   * @param filterStatus Filter number reservations by status. (optional)
   * @param filterCreatedAtGt Filter number reservations later than this value. (optional)
   * @param filterCreatedAtLt Filter number reservations earlier than this value. (optional)
   * @param filterPhoneNumbersPhoneNumber Filter number reservations having these phone numbers. (optional)
   * @param filterCustomerReference Filter number reservations via the customer reference set. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ListNumberReservationsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListNumberReservationsResponse>> listNumberReservationsWithHttpInfo(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listNumberReservationsRequestBuilder(filterStatus, filterCreatedAtGt, filterCreatedAtLt, filterPhoneNumbersPhoneNumber, filterCustomerReference);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listNumberReservations", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListNumberReservationsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListNumberReservationsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listNumberReservationsRequestBuilder(String filterStatus, String filterCreatedAtGt, String filterCreatedAtLt, String filterPhoneNumbersPhoneNumber, String filterCustomerReference) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_reservations";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[status]", filterStatus));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][gt]", filterCreatedAtGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][lt]", filterCreatedAtLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[phone_numbers.phone_number]", filterPhoneNumbersPhoneNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[customer_reference]", filterCustomerReference));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistNumberReservationsRequest {
    private String filterStatus; // Filter number reservations by status. (optional)
    private String filterCreatedAtGt; // Filter number reservations later than this value. (optional)
    private String filterCreatedAtLt; // Filter number reservations earlier than this value. (optional)
    private String filterPhoneNumbersPhoneNumber; // Filter number reservations having these phone numbers. (optional)
    private String filterCustomerReference; // Filter number reservations via the customer reference set. (optional)

    private APIlistNumberReservationsRequest(Builder builder) {
      this.filterStatus = builder.filterStatus;
      this.filterCreatedAtGt = builder.filterCreatedAtGt;
      this.filterCreatedAtLt = builder.filterCreatedAtLt;
      this.filterPhoneNumbersPhoneNumber = builder.filterPhoneNumbersPhoneNumber;
      this.filterCustomerReference = builder.filterCustomerReference;
    }
    public String filterStatus() {
      return filterStatus;
    }
    public String filterCreatedAtGt() {
      return filterCreatedAtGt;
    }
    public String filterCreatedAtLt() {
      return filterCreatedAtLt;
    }
    public String filterPhoneNumbersPhoneNumber() {
      return filterPhoneNumbersPhoneNumber;
    }
    public String filterCustomerReference() {
      return filterCustomerReference;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private String filterStatus;
      private String filterCreatedAtGt;
      private String filterCreatedAtLt;
      private String filterPhoneNumbersPhoneNumber;
      private String filterCustomerReference;

      public Builder filterStatus(String filterStatus) {
        this.filterStatus = filterStatus;
        return this;
      }
      public Builder filterCreatedAtGt(String filterCreatedAtGt) {
        this.filterCreatedAtGt = filterCreatedAtGt;
        return this;
      }
      public Builder filterCreatedAtLt(String filterCreatedAtLt) {
        this.filterCreatedAtLt = filterCreatedAtLt;
        return this;
      }
      public Builder filterPhoneNumbersPhoneNumber(String filterPhoneNumbersPhoneNumber) {
        this.filterPhoneNumbersPhoneNumber = filterPhoneNumbersPhoneNumber;
        return this;
      }
      public Builder filterCustomerReference(String filterCustomerReference) {
        this.filterCustomerReference = filterCustomerReference;
        return this;
      }
      public APIlistNumberReservationsRequest build() {
        return new APIlistNumberReservationsRequest(this);
      }
    }
  }

  /**
   * Retrieve a number reservation
   * Gets a single phone number reservation.
   * @param numberReservationId The number reservation ID. (required)
   * @return CompletableFuture&lt;NumberReservationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<NumberReservationResponse> retrieveNumberReservation(String numberReservationId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveNumberReservationRequestBuilder(numberReservationId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveNumberReservation", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a number reservation
   * Gets a single phone number reservation.
   * @param numberReservationId The number reservation ID. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;NumberReservationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<NumberReservationResponse>> retrieveNumberReservationWithHttpInfo(String numberReservationId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveNumberReservationRequestBuilder(numberReservationId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveNumberReservation", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<NumberReservationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NumberReservationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveNumberReservationRequestBuilder(String numberReservationId) throws ApiException {
    // verify the required parameter 'numberReservationId' is set
    if (numberReservationId == null) {
      throw new ApiException(400, "Missing the required parameter 'numberReservationId' when calling retrieveNumberReservation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/number_reservations/{number_reservation_id}"
        .replace("{number_reservation_id}", ApiClient.urlEncode(numberReservationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
