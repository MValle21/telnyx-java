/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiCallback;
import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.Pair;
import com.telnyx.sdk.ProgressRequestBody;
import com.telnyx.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListAvailablePhoneNumbersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberSearchApi {
    private ApiClient apiClient;

    public NumberSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberSearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listAvailablePhoneNumbers
     * @param filterPhoneNumberStartsWith Filter numbers starting with a pattern (meant to be used after &#x60;national_destination_code&#x60; filter has been set). (optional)
     * @param filterPhoneNumberEndsWith Filter numbers ending with a pattern. (optional)
     * @param filterPhoneNumberContains Filter numbers containing a pattern. (optional)
     * @param filterLocality Filter phone numbers by city. (optional)
     * @param filterAdministrativeArea Filter phone numbers by US state/CA province. (optional)
     * @param filterCountryCode Filter phone numbers by ISO alpha-2 country code. (optional)
     * @param filterNationalDestinationCode Filter by the national destination code of the number. This filter is only applicable to North American numbers. (optional)
     * @param filterRateCenter Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers. (optional)
     * @param filterNumberType Filter phone numbers by number type. (optional)
     * @param filterFeatures Filter if the phone number should be used for voice, fax, mms, sms, emergency. (optional)
     * @param filterLimit Limits the number of results. (optional)
     * @param filterBestEffort Filter to determine if best effort results should be included. (optional)
     * @param filterQuickship Filter to exclude phone numbers that need additional time after to purchase to receive phone calls. (optional)
     * @param filterReservable Filter to exclude phone numbers that cannot be reserved before purchase. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAvailablePhoneNumbersCall(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/available_phone_numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filterPhoneNumberStartsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[phone_number][starts_with]", filterPhoneNumberStartsWith));
        if (filterPhoneNumberEndsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[phone_number][ends_with]", filterPhoneNumberEndsWith));
        if (filterPhoneNumberContains != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[phone_number][contains]", filterPhoneNumberContains));
        if (filterLocality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[locality]", filterLocality));
        if (filterAdministrativeArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[administrative_area]", filterAdministrativeArea));
        if (filterCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[country_code]", filterCountryCode));
        if (filterNationalDestinationCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[national_destination_code]", filterNationalDestinationCode));
        if (filterRateCenter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[rate_center]", filterRateCenter));
        if (filterNumberType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[number_type]", filterNumberType));
        if (filterFeatures != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter[features]", filterFeatures));
        if (filterLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[limit]", filterLimit));
        if (filterBestEffort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[best_effort]", filterBestEffort));
        if (filterQuickship != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[quickship]", filterQuickship));
        if (filterReservable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter[reservable]", filterReservable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAvailablePhoneNumbersValidateBeforeCall(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAvailablePhoneNumbersCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List available phone numbers
     * 
     * @param filterPhoneNumberStartsWith Filter numbers starting with a pattern (meant to be used after &#x60;national_destination_code&#x60; filter has been set). (optional)
     * @param filterPhoneNumberEndsWith Filter numbers ending with a pattern. (optional)
     * @param filterPhoneNumberContains Filter numbers containing a pattern. (optional)
     * @param filterLocality Filter phone numbers by city. (optional)
     * @param filterAdministrativeArea Filter phone numbers by US state/CA province. (optional)
     * @param filterCountryCode Filter phone numbers by ISO alpha-2 country code. (optional)
     * @param filterNationalDestinationCode Filter by the national destination code of the number. This filter is only applicable to North American numbers. (optional)
     * @param filterRateCenter Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers. (optional)
     * @param filterNumberType Filter phone numbers by number type. (optional)
     * @param filterFeatures Filter if the phone number should be used for voice, fax, mms, sms, emergency. (optional)
     * @param filterLimit Limits the number of results. (optional)
     * @param filterBestEffort Filter to determine if best effort results should be included. (optional)
     * @param filterQuickship Filter to exclude phone numbers that need additional time after to purchase to receive phone calls. (optional)
     * @param filterReservable Filter to exclude phone numbers that cannot be reserved before purchase. (optional)
     * @return ListAvailablePhoneNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListAvailablePhoneNumbersResponse listAvailablePhoneNumbers(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable) throws ApiException {
        ApiResponse<ListAvailablePhoneNumbersResponse> resp = listAvailablePhoneNumbersWithHttpInfo(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable);
        return resp.getData();
    }

    /**
     * List available phone numbers
     * 
     * @param filterPhoneNumberStartsWith Filter numbers starting with a pattern (meant to be used after &#x60;national_destination_code&#x60; filter has been set). (optional)
     * @param filterPhoneNumberEndsWith Filter numbers ending with a pattern. (optional)
     * @param filterPhoneNumberContains Filter numbers containing a pattern. (optional)
     * @param filterLocality Filter phone numbers by city. (optional)
     * @param filterAdministrativeArea Filter phone numbers by US state/CA province. (optional)
     * @param filterCountryCode Filter phone numbers by ISO alpha-2 country code. (optional)
     * @param filterNationalDestinationCode Filter by the national destination code of the number. This filter is only applicable to North American numbers. (optional)
     * @param filterRateCenter Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers. (optional)
     * @param filterNumberType Filter phone numbers by number type. (optional)
     * @param filterFeatures Filter if the phone number should be used for voice, fax, mms, sms, emergency. (optional)
     * @param filterLimit Limits the number of results. (optional)
     * @param filterBestEffort Filter to determine if best effort results should be included. (optional)
     * @param filterQuickship Filter to exclude phone numbers that need additional time after to purchase to receive phone calls. (optional)
     * @param filterReservable Filter to exclude phone numbers that cannot be reserved before purchase. (optional)
     * @return ApiResponse&lt;ListAvailablePhoneNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListAvailablePhoneNumbersResponse> listAvailablePhoneNumbersWithHttpInfo(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable) throws ApiException {
        com.squareup.okhttp.Call call = listAvailablePhoneNumbersValidateBeforeCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, null, null);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumbersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List available phone numbers (asynchronously)
     * 
     * @param filterPhoneNumberStartsWith Filter numbers starting with a pattern (meant to be used after &#x60;national_destination_code&#x60; filter has been set). (optional)
     * @param filterPhoneNumberEndsWith Filter numbers ending with a pattern. (optional)
     * @param filterPhoneNumberContains Filter numbers containing a pattern. (optional)
     * @param filterLocality Filter phone numbers by city. (optional)
     * @param filterAdministrativeArea Filter phone numbers by US state/CA province. (optional)
     * @param filterCountryCode Filter phone numbers by ISO alpha-2 country code. (optional)
     * @param filterNationalDestinationCode Filter by the national destination code of the number. This filter is only applicable to North American numbers. (optional)
     * @param filterRateCenter Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers. (optional)
     * @param filterNumberType Filter phone numbers by number type. (optional)
     * @param filterFeatures Filter if the phone number should be used for voice, fax, mms, sms, emergency. (optional)
     * @param filterLimit Limits the number of results. (optional)
     * @param filterBestEffort Filter to determine if best effort results should be included. (optional)
     * @param filterQuickship Filter to exclude phone numbers that need additional time after to purchase to receive phone calls. (optional)
     * @param filterReservable Filter to exclude phone numbers that cannot be reserved before purchase. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAvailablePhoneNumbersAsync(String filterPhoneNumberStartsWith, String filterPhoneNumberEndsWith, String filterPhoneNumberContains, String filterLocality, String filterAdministrativeArea, String filterCountryCode, String filterNationalDestinationCode, String filterRateCenter, String filterNumberType, List<String> filterFeatures, Integer filterLimit, Boolean filterBestEffort, Boolean filterQuickship, Boolean filterReservable, final ApiCallback<ListAvailablePhoneNumbersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAvailablePhoneNumbersValidateBeforeCall(filterPhoneNumberStartsWith, filterPhoneNumberEndsWith, filterPhoneNumberContains, filterLocality, filterAdministrativeArea, filterCountryCode, filterNationalDestinationCode, filterRateCenter, filterNumberType, filterFeatures, filterLimit, filterBestEffort, filterQuickship, filterReservable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumbersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
