/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.ApiResponse;
import com.telnyx.sdk.Pair;

import com.telnyx.sdk.models.GetRecordingResponse;
import com.telnyx.sdk.models.ListRecordingsResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordingsCommandsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public RecordingsCommandsApi() {
    this(new ApiClient());
  }

  public RecordingsCommandsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String>localVarResponse) {
    return new ApiException(localVarResponse.statusCode(),
        operationId + " call received non-success response",
        localVarResponse.headers(),
        localVarResponse.body());
  }

  /**
   * List recordings
   * Lists recordings for the authenticated user
   * @param listRecordingsRequest {@link APIlistRecordingsRequest}
   * @return CompletableFuture&lt;ListRecordingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListRecordingsResponse> listRecordings(APIlistRecordingsRequest listRecordingsRequest) throws ApiException {
    String filterConferenceId = listRecordingsRequest.filterConferenceId();
    String filterCreatedAtGte = listRecordingsRequest.filterCreatedAtGte();
    String filterCreatedAtLte = listRecordingsRequest.filterCreatedAtLte();
    Integer pageNumber = listRecordingsRequest.pageNumber();
    Integer pageSize = listRecordingsRequest.pageSize();
    return listRecordings(filterConferenceId, filterCreatedAtGte, filterCreatedAtLte, pageNumber, pageSize);
  }

  /**
   * List recordings
   * Lists recordings for the authenticated user
   * @param listRecordingsRequest {@link APIlistRecordingsRequest}
   * @return CompletableFuture&lt;ApiResponse&lt;ListRecordingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListRecordingsResponse>> listRecordingsWithHttpInfo(APIlistRecordingsRequest listRecordingsRequest) throws ApiException {
    String filterConferenceId = listRecordingsRequest.filterConferenceId();
    String filterCreatedAtGte = listRecordingsRequest.filterCreatedAtGte();
    String filterCreatedAtLte = listRecordingsRequest.filterCreatedAtLte();
    Integer pageNumber = listRecordingsRequest.pageNumber();
    Integer pageSize = listRecordingsRequest.pageSize();
    return listRecordingsWithHttpInfo(filterConferenceId, filterCreatedAtGte, filterCreatedAtLte, pageNumber, pageSize);
  }

  /**
   * List recordings
   * Lists recordings for the authenticated user
   * @param filterConferenceId Return only recordings associated with a given conference (optional)
   * @param filterCreatedAtGte Return only recordings created later than or at given ISO 8601 datetime (optional)
   * @param filterCreatedAtLte Return only recordings created earlier than or at given ISO 8601 datetime (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ListRecordingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ListRecordingsResponse> listRecordings(String filterConferenceId, String filterCreatedAtGte, String filterCreatedAtLte, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listRecordingsRequestBuilder(filterConferenceId, filterCreatedAtGte, filterCreatedAtLte, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listRecordings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRecordingsResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List recordings
   * Lists recordings for the authenticated user
   * @param filterConferenceId Return only recordings associated with a given conference (optional)
   * @param filterCreatedAtGte Return only recordings created later than or at given ISO 8601 datetime (optional)
   * @param filterCreatedAtLte Return only recordings created earlier than or at given ISO 8601 datetime (optional)
   * @param pageNumber The page number to load (optional, default to 1)
   * @param pageSize The size of the page (optional, default to 20)
   * @return CompletableFuture&lt;ApiResponse&lt;ListRecordingsResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ListRecordingsResponse>> listRecordingsWithHttpInfo(String filterConferenceId, String filterCreatedAtGte, String filterCreatedAtLte, Integer pageNumber, Integer pageSize) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = listRecordingsRequestBuilder(filterConferenceId, filterCreatedAtGte, filterCreatedAtLte, pageNumber, pageSize);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("listRecordings", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ListRecordingsResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRecordingsResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder listRecordingsRequestBuilder(String filterConferenceId, String filterCreatedAtGte, String filterCreatedAtLte, Integer pageNumber, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/recordings";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[conference_id]", filterConferenceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][gte]", filterCreatedAtGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter[created_at][lte]", filterCreatedAtLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[number]", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page[size]", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  public static final class APIlistRecordingsRequest {
    private String filterConferenceId; // Return only recordings associated with a given conference (optional)
    private String filterCreatedAtGte; // Return only recordings created later than or at given ISO 8601 datetime (optional)
    private String filterCreatedAtLte; // Return only recordings created earlier than or at given ISO 8601 datetime (optional)
    private Integer pageNumber; // The page number to load (optional, default to 1)
    private Integer pageSize; // The size of the page (optional, default to 20)

    private APIlistRecordingsRequest(Builder builder) {
      this.filterConferenceId = builder.filterConferenceId;
      this.filterCreatedAtGte = builder.filterCreatedAtGte;
      this.filterCreatedAtLte = builder.filterCreatedAtLte;
      this.pageNumber = builder.pageNumber;
      this.pageSize = builder.pageSize;
    }
    public String filterConferenceId() {
      return filterConferenceId;
    }
    public String filterCreatedAtGte() {
      return filterCreatedAtGte;
    }
    public String filterCreatedAtLte() {
      return filterCreatedAtLte;
    }
    public Integer pageNumber() {
      return pageNumber;
    }
    public Integer pageSize() {
      return pageSize;
    }
    public static Builder newBuilder() {
      return new Builder();
    }

    public static class Builder {
      private String filterConferenceId;
      private String filterCreatedAtGte;
      private String filterCreatedAtLte;
      private Integer pageNumber;
      private Integer pageSize;

      public Builder filterConferenceId(String filterConferenceId) {
        this.filterConferenceId = filterConferenceId;
        return this;
      }
      public Builder filterCreatedAtGte(String filterCreatedAtGte) {
        this.filterCreatedAtGte = filterCreatedAtGte;
        return this;
      }
      public Builder filterCreatedAtLte(String filterCreatedAtLte) {
        this.filterCreatedAtLte = filterCreatedAtLte;
        return this;
      }
      public Builder pageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
      }
      public Builder pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }
      public APIlistRecordingsRequest build() {
        return new APIlistRecordingsRequest(this);
      }
    }
  }

  /**
   * Retrieve a recording
   * Retrieve a recording from the authenticated user&#39;s recordings
   * @param id Uniquely identifies the recording (required)
   * @return CompletableFuture&lt;GetRecordingResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<GetRecordingResponse> retrieveRecording(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveRecordingRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetRecordingResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Retrieve a recording
   * Retrieve a recording from the authenticated user&#39;s recordings
   * @param id Uniquely identifies the recording (required)
   * @return CompletableFuture&lt;ApiResponse&lt;GetRecordingResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<GetRecordingResponse>> retrieveRecordingWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = retrieveRecordingRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("retrieveRecording", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<GetRecordingResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetRecordingResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder retrieveRecordingRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveRecording");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/recordings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
