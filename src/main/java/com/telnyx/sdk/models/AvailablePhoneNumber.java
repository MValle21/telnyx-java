/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telnyx.sdk.models.CostInformation;
import com.telnyx.sdk.models.RegionInformation;
import com.telnyx.sdk.models.RegulatoryRequirement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AvailablePhoneNumber
 */


public class AvailablePhoneNumber {
  /**
   * Gets or Sets recordType
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    NUMBER("available_phone_number");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("record_type")
  private RecordTypeEnum recordType = null;

  @SerializedName("phone_number")
  private String phoneNumber = null;

  @SerializedName("vanity_format")
  private String vanityFormat = null;

  @SerializedName("best_effort")
  private Boolean bestEffort = null;

  @SerializedName("quickship")
  private Boolean quickship = null;

  @SerializedName("reservable")
  private Boolean reservable = null;

  @SerializedName("region_information")
  private List<RegionInformation> regionInformation = null;

  @SerializedName("cost_information")
  private CostInformation costInformation = null;

  @SerializedName("regulatory_requirements")
  private List<RegulatoryRequirement> regulatoryRequirements = null;

  public AvailablePhoneNumber recordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
    return this;
  }

   /**
   * Get recordType
   * @return recordType
  **/
  @Schema(example = "available_phone_number", description = "")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }

  public AvailablePhoneNumber phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @Schema(example = "+19705555098", description = "")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public AvailablePhoneNumber vanityFormat(String vanityFormat) {
    this.vanityFormat = vanityFormat;
    return this;
  }

   /**
   * Get vanityFormat
   * @return vanityFormat
  **/
  @Schema(description = "")
  public String getVanityFormat() {
    return vanityFormat;
  }

  public void setVanityFormat(String vanityFormat) {
    this.vanityFormat = vanityFormat;
  }

  public AvailablePhoneNumber bestEffort(Boolean bestEffort) {
    this.bestEffort = bestEffort;
    return this;
  }

   /**
   * Specifies whether the phone number is an exact match based on the search criteria or not.
   * @return bestEffort
  **/
  @Schema(example = "false", description = "Specifies whether the phone number is an exact match based on the search criteria or not.")
  public Boolean isBestEffort() {
    return bestEffort;
  }

  public void setBestEffort(Boolean bestEffort) {
    this.bestEffort = bestEffort;
  }

  public AvailablePhoneNumber quickship(Boolean quickship) {
    this.quickship = quickship;
    return this;
  }

   /**
   * Specifies whether the phone number can receive calls immediately after purchase or not.
   * @return quickship
  **/
  @Schema(example = "true", description = "Specifies whether the phone number can receive calls immediately after purchase or not.")
  public Boolean isQuickship() {
    return quickship;
  }

  public void setQuickship(Boolean quickship) {
    this.quickship = quickship;
  }

  public AvailablePhoneNumber reservable(Boolean reservable) {
    this.reservable = reservable;
    return this;
  }

   /**
   * Specifies whether the phone number can be reserved before purchase or not.
   * @return reservable
  **/
  @Schema(example = "true", description = "Specifies whether the phone number can be reserved before purchase or not.")
  public Boolean isReservable() {
    return reservable;
  }

  public void setReservable(Boolean reservable) {
    this.reservable = reservable;
  }

  public AvailablePhoneNumber regionInformation(List<RegionInformation> regionInformation) {
    this.regionInformation = regionInformation;
    return this;
  }

  public AvailablePhoneNumber addRegionInformationItem(RegionInformation regionInformationItem) {
    if (this.regionInformation == null) {
      this.regionInformation = new ArrayList<>();
    }
    this.regionInformation.add(regionInformationItem);
    return this;
  }

   /**
   * Get regionInformation
   * @return regionInformation
  **/
  @Schema(description = "")
  public List<RegionInformation> getRegionInformation() {
    return regionInformation;
  }

  public void setRegionInformation(List<RegionInformation> regionInformation) {
    this.regionInformation = regionInformation;
  }

  public AvailablePhoneNumber costInformation(CostInformation costInformation) {
    this.costInformation = costInformation;
    return this;
  }

   /**
   * Get costInformation
   * @return costInformation
  **/
  @Schema(description = "")
  public CostInformation getCostInformation() {
    return costInformation;
  }

  public void setCostInformation(CostInformation costInformation) {
    this.costInformation = costInformation;
  }

  public AvailablePhoneNumber regulatoryRequirements(List<RegulatoryRequirement> regulatoryRequirements) {
    this.regulatoryRequirements = regulatoryRequirements;
    return this;
  }

  public AvailablePhoneNumber addRegulatoryRequirementsItem(RegulatoryRequirement regulatoryRequirementsItem) {
    if (this.regulatoryRequirements == null) {
      this.regulatoryRequirements = new ArrayList<>();
    }
    this.regulatoryRequirements.add(regulatoryRequirementsItem);
    return this;
  }

   /**
   * Get regulatoryRequirements
   * @return regulatoryRequirements
  **/
  @Schema(description = "")
  public List<RegulatoryRequirement> getRegulatoryRequirements() {
    return regulatoryRequirements;
  }

  public void setRegulatoryRequirements(List<RegulatoryRequirement> regulatoryRequirements) {
    this.regulatoryRequirements = regulatoryRequirements;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailablePhoneNumber availablePhoneNumber = (AvailablePhoneNumber) o;
    return Objects.equals(this.recordType, availablePhoneNumber.recordType) &&
        Objects.equals(this.phoneNumber, availablePhoneNumber.phoneNumber) &&
        Objects.equals(this.vanityFormat, availablePhoneNumber.vanityFormat) &&
        Objects.equals(this.bestEffort, availablePhoneNumber.bestEffort) &&
        Objects.equals(this.quickship, availablePhoneNumber.quickship) &&
        Objects.equals(this.reservable, availablePhoneNumber.reservable) &&
        Objects.equals(this.regionInformation, availablePhoneNumber.regionInformation) &&
        Objects.equals(this.costInformation, availablePhoneNumber.costInformation) &&
        Objects.equals(this.regulatoryRequirements, availablePhoneNumber.regulatoryRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, phoneNumber, vanityFormat, bestEffort, quickship, reservable, regionInformation, costInformation, regulatoryRequirements);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailablePhoneNumber {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    vanityFormat: ").append(toIndentedString(vanityFormat)).append("\n");
    sb.append("    bestEffort: ").append(toIndentedString(bestEffort)).append("\n");
    sb.append("    quickship: ").append(toIndentedString(quickship)).append("\n");
    sb.append("    reservable: ").append(toIndentedString(reservable)).append("\n");
    sb.append("    regionInformation: ").append(toIndentedString(regionInformation)).append("\n");
    sb.append("    costInformation: ").append(toIndentedString(costInformation)).append("\n");
    sb.append("    regulatoryRequirements: ").append(toIndentedString(regulatoryRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
