/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CallEvent
 */


public class CallEvent {
  /**
   * Gets or Sets recordType
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    EVENT("call_event");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("record_type")
  private RecordTypeEnum recordType = null;

  @SerializedName("call_leg_id")
  private String callLegId = null;

  @SerializedName("call_session_id")
  private String callSessionId = null;

  @SerializedName("event_timestamp")
  private String eventTimestamp = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Event type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COMMAND("command"),
    WEBHOOK("webhook");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("metadata")
  private Object metadata = null;

  public CallEvent recordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
    return this;
  }

   /**
   * Get recordType
   * @return recordType
  **/
  @Schema(example = "call_event", required = true, description = "")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }

  public CallEvent callLegId(String callLegId) {
    this.callLegId = callLegId;
    return this;
  }

   /**
   * Uniquely identifies an individual call leg.
   * @return callLegId
  **/
  @Schema(example = "308fe500-5213-11e9-ace7-02420a0f0668", required = true, description = "Uniquely identifies an individual call leg.")
  public String getCallLegId() {
    return callLegId;
  }

  public void setCallLegId(String callLegId) {
    this.callLegId = callLegId;
  }

  public CallEvent callSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
    return this;
  }

   /**
   * Uniquely identifies the call control session. A session may include multiple call leg events.
   * @return callSessionId
  **/
  @Schema(example = "308fec30-5213-11e9-9d3f-02420a0f0668", required = true, description = "Uniquely identifies the call control session. A session may include multiple call leg events.")
  public String getCallSessionId() {
    return callSessionId;
  }

  public void setCallSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
  }

  public CallEvent eventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
    return this;
  }

   /**
   * Event timestamp
   * @return eventTimestamp
  **/
  @Schema(example = "2019-03-29T11:10:19.127783Z", required = true, description = "Event timestamp")
  public String getEventTimestamp() {
    return eventTimestamp;
  }

  public void setEventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
  }

  public CallEvent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Event name
   * @return name
  **/
  @Schema(example = "call.hangup", required = true, description = "Event name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CallEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Event type
   * @return type
  **/
  @Schema(example = "webhook", required = true, description = "Event type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CallEvent metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Event metadata, which includes raw event, and extra information based on event type
   * @return metadata
  **/
  @Schema(required = true, description = "Event metadata, which includes raw event, and extra information based on event type")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallEvent callEvent = (CallEvent) o;
    return Objects.equals(this.recordType, callEvent.recordType) &&
        Objects.equals(this.callLegId, callEvent.callLegId) &&
        Objects.equals(this.callSessionId, callEvent.callSessionId) &&
        Objects.equals(this.eventTimestamp, callEvent.eventTimestamp) &&
        Objects.equals(this.name, callEvent.name) &&
        Objects.equals(this.type, callEvent.type) &&
        Objects.equals(this.metadata, callEvent.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, callLegId, callSessionId, eventTimestamp, name, type, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallEvent {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    callLegId: ").append(toIndentedString(callLegId)).append("\n");
    sb.append("    callSessionId: ").append(toIndentedString(callSessionId)).append("\n");
    sb.append("    eventTimestamp: ").append(toIndentedString(eventTimestamp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
