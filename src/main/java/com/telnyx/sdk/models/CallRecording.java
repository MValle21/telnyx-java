/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The call recording settings for a phone number.
 */
@Schema(description = "The call recording settings for a phone number.")

public class CallRecording {
  @SerializedName("inbound_call_recording_enabled")
  private Boolean inboundCallRecordingEnabled = false;

  /**
   * The audio file format for calls being recorded.
   */
  @JsonAdapter(InboundCallRecordingFormatEnum.Adapter.class)
  public enum InboundCallRecordingFormatEnum {
    WAV("wav"),
    MP3("mp3");

    private String value;

    InboundCallRecordingFormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InboundCallRecordingFormatEnum fromValue(String text) {
      for (InboundCallRecordingFormatEnum b : InboundCallRecordingFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InboundCallRecordingFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InboundCallRecordingFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InboundCallRecordingFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InboundCallRecordingFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("inbound_call_recording_format")
  private InboundCallRecordingFormatEnum inboundCallRecordingFormat = InboundCallRecordingFormatEnum.WAV;

  /**
   * When using &#x27;dual&#x27; channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   */
  @JsonAdapter(InboundCallRecordingChannelsEnum.Adapter.class)
  public enum InboundCallRecordingChannelsEnum {
    SINGLE("single"),
    DUAL("dual");

    private String value;

    InboundCallRecordingChannelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InboundCallRecordingChannelsEnum fromValue(String text) {
      for (InboundCallRecordingChannelsEnum b : InboundCallRecordingChannelsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InboundCallRecordingChannelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InboundCallRecordingChannelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InboundCallRecordingChannelsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InboundCallRecordingChannelsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("inbound_call_recording_channels")
  private InboundCallRecordingChannelsEnum inboundCallRecordingChannels = InboundCallRecordingChannelsEnum.SINGLE;

  public CallRecording inboundCallRecordingEnabled(Boolean inboundCallRecordingEnabled) {
    this.inboundCallRecordingEnabled = inboundCallRecordingEnabled;
    return this;
  }

   /**
   * When enabled, any inbound call to this number will be recorded.
   * @return inboundCallRecordingEnabled
  **/
  @Schema(description = "When enabled, any inbound call to this number will be recorded.")
  public Boolean isInboundCallRecordingEnabled() {
    return inboundCallRecordingEnabled;
  }

  public void setInboundCallRecordingEnabled(Boolean inboundCallRecordingEnabled) {
    this.inboundCallRecordingEnabled = inboundCallRecordingEnabled;
  }

  public CallRecording inboundCallRecordingFormat(InboundCallRecordingFormatEnum inboundCallRecordingFormat) {
    this.inboundCallRecordingFormat = inboundCallRecordingFormat;
    return this;
  }

   /**
   * The audio file format for calls being recorded.
   * @return inboundCallRecordingFormat
  **/
  @Schema(description = "The audio file format for calls being recorded.")
  public InboundCallRecordingFormatEnum getInboundCallRecordingFormat() {
    return inboundCallRecordingFormat;
  }

  public void setInboundCallRecordingFormat(InboundCallRecordingFormatEnum inboundCallRecordingFormat) {
    this.inboundCallRecordingFormat = inboundCallRecordingFormat;
  }

  public CallRecording inboundCallRecordingChannels(InboundCallRecordingChannelsEnum inboundCallRecordingChannels) {
    this.inboundCallRecordingChannels = inboundCallRecordingChannels;
    return this;
  }

   /**
   * When using &#x27;dual&#x27; channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   * @return inboundCallRecordingChannels
  **/
  @Schema(description = "When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.")
  public InboundCallRecordingChannelsEnum getInboundCallRecordingChannels() {
    return inboundCallRecordingChannels;
  }

  public void setInboundCallRecordingChannels(InboundCallRecordingChannelsEnum inboundCallRecordingChannels) {
    this.inboundCallRecordingChannels = inboundCallRecordingChannels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecording callRecording = (CallRecording) o;
    return Objects.equals(this.inboundCallRecordingEnabled, callRecording.inboundCallRecordingEnabled) &&
        Objects.equals(this.inboundCallRecordingFormat, callRecording.inboundCallRecordingFormat) &&
        Objects.equals(this.inboundCallRecordingChannels, callRecording.inboundCallRecordingChannels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboundCallRecordingEnabled, inboundCallRecordingFormat, inboundCallRecordingChannels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecording {\n");
    
    sb.append("    inboundCallRecordingEnabled: ").append(toIndentedString(inboundCallRecordingEnabled)).append("\n");
    sb.append("    inboundCallRecordingFormat: ").append(toIndentedString(inboundCallRecordingFormat)).append("\n");
    sb.append("    inboundCallRecordingChannels: ").append(toIndentedString(inboundCallRecordingChannels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
