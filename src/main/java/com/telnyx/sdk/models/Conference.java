/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telnyx.sdk.models.ConferenceEndedBy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Conference
 */


public class Conference {
  /**
   * Gets or Sets recordType
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    CONFERENCE("conference");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("record_type")
  private RecordTypeEnum recordType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("expires_at")
  private String expiresAt = null;

  @SerializedName("updated_at")
  private String updatedAt = null;

  @SerializedName("region")
  private String region = null;

  /**
   * Status of the conference
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INIT("init"),
    IN_PROGRESS("in_progress"),
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Reason why the conference ended
   */
  @JsonAdapter(EndReasonEnum.Adapter.class)
  public enum EndReasonEnum {
    ALL_LEFT("all_left"),
    ENDED_VIA_API("ended_via_api"),
    HOST_LEFT("host_left"),
    TIME_EXCEEDED("time_exceeded");

    private String value;

    EndReasonEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EndReasonEnum fromValue(String text) {
      for (EndReasonEnum b : EndReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EndReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EndReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("end_reason")
  private EndReasonEnum endReason = null;

  @SerializedName("ended_by")
  private ConferenceEndedBy endedBy = null;

  @SerializedName("connection_id")
  private String connectionId = null;

  public Conference recordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
    return this;
  }

   /**
   * Get recordType
   * @return recordType
  **/
  @Schema(example = "conference", required = true, description = "")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }

  public Conference id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Uniquely identifies the conference
   * @return id
  **/
  @Schema(example = "3fa85f64-5717-4562-b3fc-2c963f66afa6", required = true, description = "Uniquely identifies the conference")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Conference name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the conference
   * @return name
  **/
  @Schema(example = "All hands meeting", required = true, description = "Name of the conference")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Conference createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the conference was created
   * @return createdAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the conference was created")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Conference expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the conference will expire
   * @return expiresAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the conference will expire")
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }

  public Conference updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the conference was last updated
   * @return updatedAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", description = "ISO 8601 formatted date of when the conference was last updated")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Conference region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Region where the conference is hosted
   * @return region
  **/
  @Schema(example = "sv1", description = "Region where the conference is hosted")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public Conference status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the conference
   * @return status
  **/
  @Schema(example = "completed", description = "Status of the conference")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Conference endReason(EndReasonEnum endReason) {
    this.endReason = endReason;
    return this;
  }

   /**
   * Reason why the conference ended
   * @return endReason
  **/
  @Schema(example = "all_left", description = "Reason why the conference ended")
  public EndReasonEnum getEndReason() {
    return endReason;
  }

  public void setEndReason(EndReasonEnum endReason) {
    this.endReason = endReason;
  }

  public Conference endedBy(ConferenceEndedBy endedBy) {
    this.endedBy = endedBy;
    return this;
  }

   /**
   * Get endedBy
   * @return endedBy
  **/
  @Schema(description = "")
  public ConferenceEndedBy getEndedBy() {
    return endedBy;
  }

  public void setEndedBy(ConferenceEndedBy endedBy) {
    this.endedBy = endedBy;
  }

  public Conference connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * Identifies the connection associated with the conference
   * @return connectionId
  **/
  @Schema(example = "3fa85f64-9191-4567-b3fc-2c963f66afa6", description = "Identifies the connection associated with the conference")
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conference conference = (Conference) o;
    return Objects.equals(this.recordType, conference.recordType) &&
        Objects.equals(this.id, conference.id) &&
        Objects.equals(this.name, conference.name) &&
        Objects.equals(this.createdAt, conference.createdAt) &&
        Objects.equals(this.expiresAt, conference.expiresAt) &&
        Objects.equals(this.updatedAt, conference.updatedAt) &&
        Objects.equals(this.region, conference.region) &&
        Objects.equals(this.status, conference.status) &&
        Objects.equals(this.endReason, conference.endReason) &&
        Objects.equals(this.endedBy, conference.endedBy) &&
        Objects.equals(this.connectionId, conference.connectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, id, name, createdAt, expiresAt, updatedAt, region, status, endReason, endedBy, connectionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conference {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    endReason: ").append(toIndentedString(endReason)).append("\n");
    sb.append("    endedBy: ").append(toIndentedString(endedBy)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
