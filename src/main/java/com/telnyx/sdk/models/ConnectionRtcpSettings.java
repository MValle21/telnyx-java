/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ConnectionRtcpSettings
 */


public class ConnectionRtcpSettings {
  @SerializedName("port")
  private String port = rtp+1;

  @SerializedName("capture_enabled")
  private Boolean captureEnabled = false;

  @SerializedName("report_frequency_secs")
  private Integer reportFrequencySecs = 10;

  public ConnectionRtcpSettings port(String port) {
    this.port = port;
    return this;
  }

   /**
   * RTCP port by default is rtp+1, it can also be set to rtcp-mux
   * @return port
  **/
  @Schema(description = "RTCP port by default is rtp+1, it can also be set to rtcp-mux")
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }

  public ConnectionRtcpSettings captureEnabled(Boolean captureEnabled) {
    this.captureEnabled = captureEnabled;
    return this;
  }

   /**
   * BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.
   * @return captureEnabled
  **/
  @Schema(example = "true", description = "BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.")
  public Boolean isCaptureEnabled() {
    return captureEnabled;
  }

  public void setCaptureEnabled(Boolean captureEnabled) {
    this.captureEnabled = captureEnabled;
  }

  public ConnectionRtcpSettings reportFrequencySecs(Integer reportFrequencySecs) {
    this.reportFrequencySecs = reportFrequencySecs;
    return this;
  }

   /**
   * RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.
   * @return reportFrequencySecs
  **/
  @Schema(example = "10", description = "RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.")
  public Integer getReportFrequencySecs() {
    return reportFrequencySecs;
  }

  public void setReportFrequencySecs(Integer reportFrequencySecs) {
    this.reportFrequencySecs = reportFrequencySecs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionRtcpSettings connectionRtcpSettings = (ConnectionRtcpSettings) o;
    return Objects.equals(this.port, connectionRtcpSettings.port) &&
        Objects.equals(this.captureEnabled, connectionRtcpSettings.captureEnabled) &&
        Objects.equals(this.reportFrequencySecs, connectionRtcpSettings.reportFrequencySecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, captureEnabled, reportFrequencySecs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionRtcpSettings {\n");
    
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    captureEnabled: ").append(toIndentedString(captureEnabled)).append("\n");
    sb.append("    reportFrequencySecs: ").append(toIndentedString(reportFrequencySecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
