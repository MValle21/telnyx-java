/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CreateFqdnRequest
 */


public class CreateFqdnRequest {
  @SerializedName("connection_id")
  private String connectionId = null;

  @SerializedName("fqdn")
  private String fqdn = null;

  @SerializedName("port")
  private Integer port = 5060;

  @SerializedName("dns_record_type")
  private String dnsRecordType = null;

  public CreateFqdnRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * ID of the FQDN connection to which this IP should be attached.
   * @return connectionId
  **/
  @Schema(description = "ID of the FQDN connection to which this IP should be attached.")
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }

  public CreateFqdnRequest fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

   /**
   * FQDN represented by this resource.
   * @return fqdn
  **/
  @Schema(example = "example.com", required = true, description = "FQDN represented by this resource.")
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }

  public CreateFqdnRequest port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port to use when connecting to this FQDN.
   * @return port
  **/
  @Schema(example = "5060", description = "Port to use when connecting to this FQDN.")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public CreateFqdnRequest dnsRecordType(String dnsRecordType) {
    this.dnsRecordType = dnsRecordType;
    return this;
  }

   /**
   * The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be &#x27;srv&#x27;. For cases where a port is set, the DNS record type must be &#x27;a&#x27;. If the DNS record type is &#x27;a&#x27; and a port is not specified, 5060 will be used.
   * @return dnsRecordType
  **/
  @Schema(example = "a", description = "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.")
  public String getDnsRecordType() {
    return dnsRecordType;
  }

  public void setDnsRecordType(String dnsRecordType) {
    this.dnsRecordType = dnsRecordType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFqdnRequest createFqdnRequest = (CreateFqdnRequest) o;
    return Objects.equals(this.connectionId, createFqdnRequest.connectionId) &&
        Objects.equals(this.fqdn, createFqdnRequest.fqdn) &&
        Objects.equals(this.port, createFqdnRequest.port) &&
        Objects.equals(this.dnsRecordType, createFqdnRequest.dnsRecordType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, fqdn, port, dnsRecordType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFqdnRequest {\n");
    
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    dnsRecordType: ").append(toIndentedString(dnsRecordType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
