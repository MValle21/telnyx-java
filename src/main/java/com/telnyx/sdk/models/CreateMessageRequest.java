/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
/**
 * CreateMessageRequest
 */


public class CreateMessageRequest {
  @SerializedName("from")
  private String from = null;

  @SerializedName("messaging_profile_id")
  private UUID messagingProfileId = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("media_urls")
  private List<String> mediaUrls = null;

  @SerializedName("webhook_url")
  private String webhookUrl = null;

  @SerializedName("webhook_failover_url")
  private String webhookFailoverUrl = null;

  @SerializedName("use_profile_webhooks")
  private Boolean useProfileWebhooks = true;

  /**
   * The protocol for sending the message, either SMS or MMS.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SMS("SMS"),
    MMS("MMS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("auto_detect")
  private Boolean autoDetect = false;

  public CreateMessageRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).  **Required if sending with a phone number, short code, or alphanumeric sender ID.** 
   * @return from
  **/
  @Schema(description = "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).  **Required if sending with a phone number, short code, or alphanumeric sender ID.** ")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public CreateMessageRequest messagingProfileId(UUID messagingProfileId) {
    this.messagingProfileId = messagingProfileId;
    return this;
  }

   /**
   * Unique identifier for a messaging profile.  **Required if sending via number pool or with an alphanumeric sender ID.** 
   * @return messagingProfileId
  **/
  @Schema(description = "Unique identifier for a messaging profile.  **Required if sending via number pool or with an alphanumeric sender ID.** ")
  public UUID getMessagingProfileId() {
    return messagingProfileId;
  }

  public void setMessagingProfileId(UUID messagingProfileId) {
    this.messagingProfileId = messagingProfileId;
  }

  public CreateMessageRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).
   * @return to
  **/
  @Schema(required = true, description = "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public CreateMessageRequest text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Message body (i.e., content) as a non-empty string.  **Required for SMS**
   * @return text
  **/
  @Schema(description = "Message body (i.e., content) as a non-empty string.  **Required for SMS**")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public CreateMessageRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject of multimedia message
   * @return subject
  **/
  @Schema(description = "Subject of multimedia message")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public CreateMessageRequest mediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
    return this;
  }

  public CreateMessageRequest addMediaUrlsItem(String mediaUrlsItem) {
    if (this.mediaUrls == null) {
      this.mediaUrls = new ArrayList<>();
    }
    this.mediaUrls.add(mediaUrlsItem);
    return this;
  }

   /**
   * A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**
   * @return mediaUrls
  **/
  @Schema(description = "A list of media URLs. The total media size must be less than 1 MB.  **Required for MMS**")
  public List<String> getMediaUrls() {
    return mediaUrls;
  }

  public void setMediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
  }

  public CreateMessageRequest webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL where webhooks related to this message will be sent.
   * @return webhookUrl
  **/
  @Schema(description = "The URL where webhooks related to this message will be sent.")
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }

  public CreateMessageRequest webhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
    return this;
  }

   /**
   * The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.
   * @return webhookFailoverUrl
  **/
  @Schema(description = "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.")
  public String getWebhookFailoverUrl() {
    return webhookFailoverUrl;
  }

  public void setWebhookFailoverUrl(String webhookFailoverUrl) {
    this.webhookFailoverUrl = webhookFailoverUrl;
  }

  public CreateMessageRequest useProfileWebhooks(Boolean useProfileWebhooks) {
    this.useProfileWebhooks = useProfileWebhooks;
    return this;
  }

   /**
   * If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.
   * @return useProfileWebhooks
  **/
  @Schema(description = "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.")
  public Boolean isUseProfileWebhooks() {
    return useProfileWebhooks;
  }

  public void setUseProfileWebhooks(Boolean useProfileWebhooks) {
    this.useProfileWebhooks = useProfileWebhooks;
  }

  public CreateMessageRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The protocol for sending the message, either SMS or MMS.
   * @return type
  **/
  @Schema(description = "The protocol for sending the message, either SMS or MMS.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CreateMessageRequest autoDetect(Boolean autoDetect) {
    this.autoDetect = autoDetect;
    return this;
  }

   /**
   * Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.
   * @return autoDetect
  **/
  @Schema(description = "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.")
  public Boolean isAutoDetect() {
    return autoDetect;
  }

  public void setAutoDetect(Boolean autoDetect) {
    this.autoDetect = autoDetect;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMessageRequest createMessageRequest = (CreateMessageRequest) o;
    return Objects.equals(this.from, createMessageRequest.from) &&
        Objects.equals(this.messagingProfileId, createMessageRequest.messagingProfileId) &&
        Objects.equals(this.to, createMessageRequest.to) &&
        Objects.equals(this.text, createMessageRequest.text) &&
        Objects.equals(this.subject, createMessageRequest.subject) &&
        Objects.equals(this.mediaUrls, createMessageRequest.mediaUrls) &&
        Objects.equals(this.webhookUrl, createMessageRequest.webhookUrl) &&
        Objects.equals(this.webhookFailoverUrl, createMessageRequest.webhookFailoverUrl) &&
        Objects.equals(this.useProfileWebhooks, createMessageRequest.useProfileWebhooks) &&
        Objects.equals(this.type, createMessageRequest.type) &&
        Objects.equals(this.autoDetect, createMessageRequest.autoDetect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, messagingProfileId, to, text, subject, mediaUrls, webhookUrl, webhookFailoverUrl, useProfileWebhooks, type, autoDetect);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMessageRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    messagingProfileId: ").append(toIndentedString(messagingProfileId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    mediaUrls: ").append(toIndentedString(mediaUrls)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookFailoverUrl: ").append(toIndentedString(webhookFailoverUrl)).append("\n");
    sb.append("    useProfileWebhooks: ").append(toIndentedString(useProfileWebhooks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    autoDetect: ").append(toIndentedString(autoDetect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
