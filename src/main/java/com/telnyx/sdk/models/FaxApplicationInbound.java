/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FaxApplicationInbound
 */


public class FaxApplicationInbound {
  @SerializedName("channel_limit")
  private Integer channelLimit = null;

  @SerializedName("sip_subdomain")
  private String sipSubdomain = "null";

  /**
   * This option can be enabled to receive calls from: \&quot;Anyone\&quot; (any SIP endpoint in the public Internet) or \&quot;Only my connections\&quot; (any connection assigned to the same Telnyx user).
   */
  @JsonAdapter(SipSubdomainReceiveSettingsEnum.Adapter.class)
  public enum SipSubdomainReceiveSettingsEnum {
    ONLY_MY_CONNECTIONS("only_my_connections"),
    FROM_ANYONE("from_anyone");

    private String value;

    SipSubdomainReceiveSettingsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SipSubdomainReceiveSettingsEnum fromValue(String text) {
      for (SipSubdomainReceiveSettingsEnum b : SipSubdomainReceiveSettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SipSubdomainReceiveSettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SipSubdomainReceiveSettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SipSubdomainReceiveSettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SipSubdomainReceiveSettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("sip_subdomain_receive_settings")
  private SipSubdomainReceiveSettingsEnum sipSubdomainReceiveSettings = SipSubdomainReceiveSettingsEnum.FROM_ANYONE;

  public FaxApplicationInbound channelLimit(Integer channelLimit) {
    this.channelLimit = channelLimit;
    return this;
  }

   /**
   * When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.
   * @return channelLimit
  **/
  @Schema(example = "10", description = "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.")
  public Integer getChannelLimit() {
    return channelLimit;
  }

  public void setChannelLimit(Integer channelLimit) {
    this.channelLimit = channelLimit;
  }

  public FaxApplicationInbound sipSubdomain(String sipSubdomain) {
    this.sipSubdomain = sipSubdomain;
    return this;
  }

   /**
   * Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \&quot;example.sip.telnyx.com\&quot; can be called from any SIP endpoint by using the SIP URI \&quot;sip:@example.sip.telnyx.com\&quot; where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.
   * @return sipSubdomain
  **/
  @Schema(example = "example", description = "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.")
  public String getSipSubdomain() {
    return sipSubdomain;
  }

  public void setSipSubdomain(String sipSubdomain) {
    this.sipSubdomain = sipSubdomain;
  }

  public FaxApplicationInbound sipSubdomainReceiveSettings(SipSubdomainReceiveSettingsEnum sipSubdomainReceiveSettings) {
    this.sipSubdomainReceiveSettings = sipSubdomainReceiveSettings;
    return this;
  }

   /**
   * This option can be enabled to receive calls from: \&quot;Anyone\&quot; (any SIP endpoint in the public Internet) or \&quot;Only my connections\&quot; (any connection assigned to the same Telnyx user).
   * @return sipSubdomainReceiveSettings
  **/
  @Schema(example = "only_my_connections", description = "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).")
  public SipSubdomainReceiveSettingsEnum getSipSubdomainReceiveSettings() {
    return sipSubdomainReceiveSettings;
  }

  public void setSipSubdomainReceiveSettings(SipSubdomainReceiveSettingsEnum sipSubdomainReceiveSettings) {
    this.sipSubdomainReceiveSettings = sipSubdomainReceiveSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaxApplicationInbound faxApplicationInbound = (FaxApplicationInbound) o;
    return Objects.equals(this.channelLimit, faxApplicationInbound.channelLimit) &&
        Objects.equals(this.sipSubdomain, faxApplicationInbound.sipSubdomain) &&
        Objects.equals(this.sipSubdomainReceiveSettings, faxApplicationInbound.sipSubdomainReceiveSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelLimit, sipSubdomain, sipSubdomainReceiveSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaxApplicationInbound {\n");
    
    sb.append("    channelLimit: ").append(toIndentedString(channelLimit)).append("\n");
    sb.append("    sipSubdomain: ").append(toIndentedString(sipSubdomain)).append("\n");
    sb.append("    sipSubdomainReceiveSettings: ").append(toIndentedString(sipSubdomainReceiveSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
