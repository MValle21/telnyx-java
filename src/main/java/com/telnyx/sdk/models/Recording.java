/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telnyx.sdk.models.RecordingDownloadUrls;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Recording
 */


public class Recording {
  /**
   * Gets or Sets recordType
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    RECORDING("recording");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("record_type")
  private RecordTypeEnum recordType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("updated_at")
  private String updatedAt = null;

  @SerializedName("recording_started_at")
  private String recordingStartedAt = null;

  @SerializedName("recording_ended_at")
  private String recordingEndedAt = null;

  @SerializedName("duration_millis")
  private Integer durationMillis = null;

  /**
   * The status of the recording. Only resources for &#x60;completed&#x60; recordings are currently supported
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * When &#x60;dual&#x60;, final audio file has the first leg on channel A, and the rest on channel B.
   */
  @JsonAdapter(ChannelsEnum.Adapter.class)
  public enum ChannelsEnum {
    SINGLE("single"),
    DUAL("dual");

    private String value;

    ChannelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChannelsEnum fromValue(String text) {
      for (ChannelsEnum b : ChannelsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChannelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("channels")
  private ChannelsEnum channels = null;

  /**
   * The kind of event that led to this recording being created
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    CONFERENCE("conference"),
    CALL("call");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SourceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("source")
  private SourceEnum source = null;

  @SerializedName("conference_id")
  private String conferenceId = null;

  @SerializedName("call_leg_id")
  private String callLegId = null;

  @SerializedName("call_session_id")
  private String callSessionId = null;

  @SerializedName("download_urls")
  private RecordingDownloadUrls downloadUrls = null;

  public Recording recordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
    return this;
  }

   /**
   * Get recordType
   * @return recordType
  **/
  @Schema(example = "recording", required = true, description = "")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }

  public Recording id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Uniquely identifies the recording
   * @return id
  **/
  @Schema(example = "3fa85f64-5717-4562-b3fc-2c963f66afa6", required = true, description = "Uniquely identifies the recording")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Recording createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the recording was created
   * @return createdAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the recording was created")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Recording updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the recording was last updated
   * @return updatedAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the recording was last updated")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Recording recordingStartedAt(String recordingStartedAt) {
    this.recordingStartedAt = recordingStartedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the recording started
   * @return recordingStartedAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the recording started")
  public String getRecordingStartedAt() {
    return recordingStartedAt;
  }

  public void setRecordingStartedAt(String recordingStartedAt) {
    this.recordingStartedAt = recordingStartedAt;
  }

  public Recording recordingEndedAt(String recordingEndedAt) {
    this.recordingEndedAt = recordingEndedAt;
    return this;
  }

   /**
   * ISO 8601 formatted date of when the recording ended
   * @return recordingEndedAt
  **/
  @Schema(example = "2019-01-23T18:10:02.574Z", required = true, description = "ISO 8601 formatted date of when the recording ended")
  public String getRecordingEndedAt() {
    return recordingEndedAt;
  }

  public void setRecordingEndedAt(String recordingEndedAt) {
    this.recordingEndedAt = recordingEndedAt;
  }

  public Recording durationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
    return this;
  }

   /**
   * The duration of the recording in milliseconds
   * @return durationMillis
  **/
  @Schema(example = "60000", required = true, description = "The duration of the recording in milliseconds")
  public Integer getDurationMillis() {
    return durationMillis;
  }

  public void setDurationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
  }

  public Recording status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the recording. Only resources for &#x60;completed&#x60; recordings are currently supported
   * @return status
  **/
  @Schema(example = "completed", required = true, description = "The status of the recording. Only resources for `completed` recordings are currently supported")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Recording channels(ChannelsEnum channels) {
    this.channels = channels;
    return this;
  }

   /**
   * When &#x60;dual&#x60;, final audio file has the first leg on channel A, and the rest on channel B.
   * @return channels
  **/
  @Schema(example = "single", required = true, description = "When `dual`, final audio file has the first leg on channel A, and the rest on channel B.")
  public ChannelsEnum getChannels() {
    return channels;
  }

  public void setChannels(ChannelsEnum channels) {
    this.channels = channels;
  }

  public Recording source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * The kind of event that led to this recording being created
   * @return source
  **/
  @Schema(example = "conference", required = true, description = "The kind of event that led to this recording being created")
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }

  public Recording conferenceId(String conferenceId) {
    this.conferenceId = conferenceId;
    return this;
  }

   /**
   * If a conference recording, uniquely identifies the recorded conference
   * @return conferenceId
  **/
  @Schema(example = "3fa85f64-5717-4562-b3fc-2c963f66afa6", description = "If a conference recording, uniquely identifies the recorded conference")
  public String getConferenceId() {
    return conferenceId;
  }

  public void setConferenceId(String conferenceId) {
    this.conferenceId = conferenceId;
  }

  public Recording callLegId(String callLegId) {
    this.callLegId = callLegId;
    return this;
  }

   /**
   * If a call recording, uniquely identifies the recorded call leg
   * @return callLegId
  **/
  @Schema(example = "11111111-5717-4562-b3fc-2c963f66afa6", description = "If a call recording, uniquely identifies the recorded call leg")
  public String getCallLegId() {
    return callLegId;
  }

  public void setCallLegId(String callLegId) {
    this.callLegId = callLegId;
  }

  public Recording callSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
    return this;
  }

   /**
   * If a call recording, uniquely identifies the recorded call session
   * @return callSessionId
  **/
  @Schema(example = "22222222-5717-4562-b3fc-2c963f66afa6", description = "If a call recording, uniquely identifies the recorded call session")
  public String getCallSessionId() {
    return callSessionId;
  }

  public void setCallSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
  }

  public Recording downloadUrls(RecordingDownloadUrls downloadUrls) {
    this.downloadUrls = downloadUrls;
    return this;
  }

   /**
   * Get downloadUrls
   * @return downloadUrls
  **/
  @Schema(required = true, description = "")
  public RecordingDownloadUrls getDownloadUrls() {
    return downloadUrls;
  }

  public void setDownloadUrls(RecordingDownloadUrls downloadUrls) {
    this.downloadUrls = downloadUrls;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recording recording = (Recording) o;
    return Objects.equals(this.recordType, recording.recordType) &&
        Objects.equals(this.id, recording.id) &&
        Objects.equals(this.createdAt, recording.createdAt) &&
        Objects.equals(this.updatedAt, recording.updatedAt) &&
        Objects.equals(this.recordingStartedAt, recording.recordingStartedAt) &&
        Objects.equals(this.recordingEndedAt, recording.recordingEndedAt) &&
        Objects.equals(this.durationMillis, recording.durationMillis) &&
        Objects.equals(this.status, recording.status) &&
        Objects.equals(this.channels, recording.channels) &&
        Objects.equals(this.source, recording.source) &&
        Objects.equals(this.conferenceId, recording.conferenceId) &&
        Objects.equals(this.callLegId, recording.callLegId) &&
        Objects.equals(this.callSessionId, recording.callSessionId) &&
        Objects.equals(this.downloadUrls, recording.downloadUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, id, createdAt, updatedAt, recordingStartedAt, recordingEndedAt, durationMillis, status, channels, source, conferenceId, callLegId, callSessionId, downloadUrls);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recording {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    recordingStartedAt: ").append(toIndentedString(recordingStartedAt)).append("\n");
    sb.append("    recordingEndedAt: ").append(toIndentedString(recordingEndedAt)).append("\n");
    sb.append("    durationMillis: ").append(toIndentedString(durationMillis)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    conferenceId: ").append(toIndentedString(conferenceId)).append("\n");
    sb.append("    callLegId: ").append(toIndentedString(callLegId)).append("\n");
    sb.append("    callSessionId: ").append(toIndentedString(callSessionId)).append("\n");
    sb.append("    downloadUrls: ").append(toIndentedString(downloadUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
