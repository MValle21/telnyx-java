/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * RegulatoryRequirement
 */


public class RegulatoryRequirement {
  @SerializedName("record_type")
  private String recordType = null;

  /**
   * Gets or Sets requirementType
   */
  @JsonAdapter(RequirementTypeEnum.Adapter.class)
  public enum RequirementTypeEnum {
    END_USER_PROOF_OF_ADDRESS("end user proof of address"),
    ENTITY_IDENTIFICATION("entity identification"),
    END_USER_ADDRESS("end user address");

    private String value;

    RequirementTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RequirementTypeEnum fromValue(String text) {
      for (RequirementTypeEnum b : RequirementTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RequirementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequirementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequirementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RequirementTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("requirement_type")
  private RequirementTypeEnum requirementType = null;

  @SerializedName("label")
  private String label = null;

  /**
   * Gets or Sets fieldType
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
  public enum FieldTypeEnum {
    FILE_UPLOAD("file upload"),
    TEXT_FIELD("text field"),
    ADDRESS("address"),
    DATETIME("datetime");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FieldTypeEnum fromValue(String text) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FieldTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("field_type")
  private FieldTypeEnum fieldType = null;

  @SerializedName("description")
  private String description = null;

   /**
   * Identifies the type of the resource.
   * @return recordType
  **/
  @Schema(example = "regulatory_requirement", description = "Identifies the type of the resource.")
  public String getRecordType() {
    return recordType;
  }

  public RegulatoryRequirement requirementType(RequirementTypeEnum requirementType) {
    this.requirementType = requirementType;
    return this;
  }

   /**
   * Get requirementType
   * @return requirementType
  **/
  @Schema(description = "")
  public RequirementTypeEnum getRequirementType() {
    return requirementType;
  }

  public void setRequirementType(RequirementTypeEnum requirementType) {
    this.requirementType = requirementType;
  }

  public RegulatoryRequirement label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(example = "Proof of Address", description = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public RegulatoryRequirement fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @Schema(description = "")
  public FieldTypeEnum getFieldType() {
    return fieldType;
  }

  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }

  public RegulatoryRequirement description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(example = "Requirement for providing Proof of Address.", description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulatoryRequirement regulatoryRequirement = (RegulatoryRequirement) o;
    return Objects.equals(this.recordType, regulatoryRequirement.recordType) &&
        Objects.equals(this.requirementType, regulatoryRequirement.requirementType) &&
        Objects.equals(this.label, regulatoryRequirement.label) &&
        Objects.equals(this.fieldType, regulatoryRequirement.fieldType) &&
        Objects.equals(this.description, regulatoryRequirement.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, requirementType, label, fieldType, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulatoryRequirement {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    requirementType: ").append(toIndentedString(requirementType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
