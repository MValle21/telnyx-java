/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;
/**
 * ShortCode
 */


public class ShortCode {
  /**
   * Identifies the type of the resource.
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    CODE("short_code");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("record_type")
  private RecordTypeEnum recordType = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("short_code")
  private String shortCode = null;

  @SerializedName("country_code")
  private String countryCode = null;

  @SerializedName("messaging_profile_id")
  private String messagingProfileId = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

   /**
   * Identifies the type of the resource.
   * @return recordType
  **/
  @Schema(example = "short_code", description = "Identifies the type of the resource.")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

   /**
   * Identifies the type of resource.
   * @return id
  **/
  @Schema(description = "Identifies the type of resource.")
  public UUID getId() {
    return id;
  }

   /**
   * Short digit sequence used to address messages.
   * @return shortCode
  **/
  @Schema(description = "Short digit sequence used to address messages.")
  public String getShortCode() {
    return shortCode;
  }

   /**
   * ISO 3166-1 alpha-2 country code.
   * @return countryCode
  **/
  @Schema(example = "US", description = "ISO 3166-1 alpha-2 country code.")
  public String getCountryCode() {
    return countryCode;
  }

  public ShortCode messagingProfileId(String messagingProfileId) {
    this.messagingProfileId = messagingProfileId;
    return this;
  }

   /**
   * Unique identifier for a messaging profile.
   * @return messagingProfileId
  **/
  @Schema(required = true, description = "Unique identifier for a messaging profile.")
  public String getMessagingProfileId() {
    return messagingProfileId;
  }

  public void setMessagingProfileId(String messagingProfileId) {
    this.messagingProfileId = messagingProfileId;
  }

   /**
   * ISO 8601 formatted date indicating when the resource was created.
   * @return createdAt
  **/
  @Schema(description = "ISO 8601 formatted date indicating when the resource was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * ISO 8601 formatted date indicating when the resource was updated.
   * @return updatedAt
  **/
  @Schema(description = "ISO 8601 formatted date indicating when the resource was updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShortCode shortCode = (ShortCode) o;
    return Objects.equals(this.recordType, shortCode.recordType) &&
        Objects.equals(this.id, shortCode.id) &&
        Objects.equals(this.shortCode, shortCode.shortCode) &&
        Objects.equals(this.countryCode, shortCode.countryCode) &&
        Objects.equals(this.messagingProfileId, shortCode.messagingProfileId) &&
        Objects.equals(this.createdAt, shortCode.createdAt) &&
        Objects.equals(this.updatedAt, shortCode.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordType, id, shortCode, countryCode, messagingProfileId, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShortCode {\n");
    
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shortCode: ").append(toIndentedString(shortCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    messagingProfileId: ").append(toIndentedString(messagingProfileId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
