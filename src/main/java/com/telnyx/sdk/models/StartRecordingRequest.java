/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telnyx.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * StartRecordingRequest
 */


public class StartRecordingRequest {
  /**
   * The audio file format used when storing the call recording. Can be either &#x60;mp3&#x60; or &#x60;wav&#x60;.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    WAV("wav"),
    MP3("mp3");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("format")
  private FormatEnum format = null;

  /**
   * When &#x60;dual&#x60;, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   */
  @JsonAdapter(ChannelsEnum.Adapter.class)
  public enum ChannelsEnum {
    SINGLE("single"),
    DUAL("dual");

    private String value;

    ChannelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChannelsEnum fromValue(String text) {
      for (ChannelsEnum b : ChannelsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChannelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("channels")
  private ChannelsEnum channels = null;

  @SerializedName("client_state")
  private String clientState = null;

  @SerializedName("command_id")
  private String commandId = null;

  @SerializedName("play_beep")
  private Boolean playBeep = null;

  public StartRecordingRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * The audio file format used when storing the call recording. Can be either &#x60;mp3&#x60; or &#x60;wav&#x60;.
   * @return format
  **/
  @Schema(example = "mp3", required = true, description = "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public StartRecordingRequest channels(ChannelsEnum channels) {
    this.channels = channels;
    return this;
  }

   /**
   * When &#x60;dual&#x60;, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   * @return channels
  **/
  @Schema(example = "single", required = true, description = "When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.")
  public ChannelsEnum getChannels() {
    return channels;
  }

  public void setChannels(ChannelsEnum channels) {
    this.channels = channels;
  }

  public StartRecordingRequest clientState(String clientState) {
    this.clientState = clientState;
    return this;
  }

   /**
   * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
   * @return clientState
  **/
  @Schema(example = "aGF2ZSBhIG5pY2UgZGF5ID1d", description = "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.")
  public String getClientState() {
    return clientState;
  }

  public void setClientState(String clientState) {
    this.clientState = clientState;
  }

  public StartRecordingRequest commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

   /**
   * Use this field to avoid duplicate commands. Telnyx will ignore commands with the same &#x60;command_id&#x60;.
   * @return commandId
  **/
  @Schema(example = "891510ac-f3e4-11e8-af5b-de00688a4901", description = "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.")
  public String getCommandId() {
    return commandId;
  }

  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }

  public StartRecordingRequest playBeep(Boolean playBeep) {
    this.playBeep = playBeep;
    return this;
  }

   /**
   * If enabled, a beep sound will be played at the start of a recording.
   * @return playBeep
  **/
  @Schema(example = "true", description = "If enabled, a beep sound will be played at the start of a recording.")
  public Boolean isPlayBeep() {
    return playBeep;
  }

  public void setPlayBeep(Boolean playBeep) {
    this.playBeep = playBeep;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartRecordingRequest startRecordingRequest = (StartRecordingRequest) o;
    return Objects.equals(this.format, startRecordingRequest.format) &&
        Objects.equals(this.channels, startRecordingRequest.channels) &&
        Objects.equals(this.clientState, startRecordingRequest.clientState) &&
        Objects.equals(this.commandId, startRecordingRequest.commandId) &&
        Objects.equals(this.playBeep, startRecordingRequest.playBeep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, channels, clientState, commandId, playBeep);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartRecordingRequest {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    clientState: ").append(toIndentedString(clientState)).append("\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    playBeep: ").append(toIndentedString(playBeep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
