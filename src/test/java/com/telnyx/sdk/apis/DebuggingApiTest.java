/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.apis;

import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.models.Errors;
import com.telnyx.sdk.models.ListCallEventsResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for DebuggingApi
 */
@Ignore
public class DebuggingApiTest {

    private final DebuggingApi api = new DebuggingApi();

    
    /**
     * List call events
     *
     * Filters call events by given filter parameters. Events are ordered by &#x60;event_timestamp&#x60;. If filter for &#x60;call_leg_id&#x60; or &#x60;call_session_id&#x60; is not present, it only filters events from the last 24 hours.  **Note**: Only one &#x60;filter[event_timestamp]&#x60; can be passed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCallEventsTest() throws ApiException {
        UUID filterCallLegId = null;
        UUID filterCallSessionId = null;
        String filterStatus = null;
        String filterType = null;
        String filterEventTimestampGt = null;
        String filterEventTimestampGte = null;
        String filterEventTimestampLt = null;
        String filterEventTimestampLte = null;
        String filterEventTimestampEq = null;
        
        DebuggingApi.APIlistCallEventsRequest request = DebuggingApi.APIlistCallEventsRequest.newBuilder()
          .filterCallLegId(filterCallLegId)
          .filterCallSessionId(filterCallSessionId)
          .filterStatus(filterStatus)
          .filterType(filterType)
          .filterEventTimestampGt(filterEventTimestampGt)
          .filterEventTimestampGte(filterEventTimestampGte)
          .filterEventTimestampLt(filterEventTimestampLt)
          .filterEventTimestampLte(filterEventTimestampLte)
          .filterEventTimestampEq(filterEventTimestampEq)
          .build();
        CompletableFuture<ListCallEventsResponse> response = 
        api.listCallEvents(request);

        // TODO: test validations
    }
    
}
